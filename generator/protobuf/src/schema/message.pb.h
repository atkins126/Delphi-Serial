// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema/message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_schema_2fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_schema_2fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_schema_2fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_schema_2fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_schema_2fmessage_2eproto;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Optional;
class OptionalDefaultTypeInternal;
extern OptionalDefaultTypeInternal _Optional_default_instance_;
class Repeated;
class RepeatedDefaultTypeInternal;
extern RepeatedDefaultTypeInternal _Repeated_default_instance_;
class Required;
class RequiredDefaultTypeInternal;
extern RequiredDefaultTypeInternal _Required_default_instance_;
class UnPacked;
class UnPackedDefaultTypeInternal;
extern UnPackedDefaultTypeInternal _UnPacked_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Message* Arena::CreateMaybeMessage<::Message>(Arena*);
template<> ::Optional* Arena::CreateMaybeMessage<::Optional>(Arena*);
template<> ::Repeated* Arena::CreateMaybeMessage<::Repeated>(Arena*);
template<> ::Required* Arena::CreateMaybeMessage<::Required>(Arena*);
template<> ::UnPacked* Arena::CreateMaybeMessage<::UnPacked>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Enum : int {
  ENUM_VALUE0 = 0,
  ENUM_VALUE2 = 2
};
bool Enum_IsValid(int value);
constexpr Enum Enum_MIN = ENUM_VALUE0;
constexpr Enum Enum_MAX = ENUM_VALUE2;
constexpr int Enum_ARRAYSIZE = Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Enum_descriptor();
template<typename T>
inline const std::string& Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Enum_descriptor(), enum_t_value);
}
inline bool Enum_Parse(
    const std::string& name, Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Enum>(
    Enum_descriptor(), name, value);
}
// ===================================================================

class Optional PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Optional) */ {
 public:
  inline Optional() : Optional(nullptr) {};
  virtual ~Optional();

  Optional(const Optional& from);
  Optional(Optional&& from) noexcept
    : Optional() {
    *this = ::std::move(from);
  }

  inline Optional& operator=(const Optional& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optional& operator=(Optional&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Optional& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Optional* internal_default_instance() {
    return reinterpret_cast<const Optional*>(
               &_Optional_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Optional& a, Optional& b) {
    a.Swap(&b);
  }
  inline void Swap(Optional* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optional* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Optional* New() const final {
    return CreateMaybeMessage<Optional>(nullptr);
  }

  Optional* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Optional>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Optional& from);
  void MergeFrom(const Optional& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Optional* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Optional";
  }
  protected:
  explicit Optional(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2fmessage_2eproto);
    return ::descriptor_table_schema_2fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesFieldNumber = 3,
    kStringFieldNumber = 10,
    kFloatFieldNumber = 1,
    kBoolFieldNumber = 2,
    kSint64FieldNumber = 5,
    kSint32FieldNumber = 4,
    kFixed32FieldNumber = 6,
    kFixed64FieldNumber = 7,
    kSfixed64FieldNumber = 9,
    kSfixed32FieldNumber = 8,
    kEnumFieldNumber = 11,
  };
  // optional bytes bytes = 3;
  bool has_bytes() const;
  private:
  bool _internal_has_bytes() const;
  public:
  void clear_bytes();
  const std::string& bytes() const;
  void set_bytes(const std::string& value);
  void set_bytes(std::string&& value);
  void set_bytes(const char* value);
  void set_bytes(const void* value, size_t size);
  std::string* mutable_bytes();
  std::string* release_bytes();
  void set_allocated_bytes(std::string* bytes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bytes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bytes(
      std::string* bytes);
  private:
  const std::string& _internal_bytes() const;
  void _internal_set_bytes(const std::string& value);
  std::string* _internal_mutable_bytes();
  public:

  // optional string string = 10;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  void set_string(const std::string& value);
  void set_string(std::string&& value);
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  std::string* mutable_string();
  std::string* release_string();
  void set_allocated_string(std::string* string);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_string();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_string(
      std::string* string);
  private:
  const std::string& _internal_string() const;
  void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  // optional float float = 1;
  bool has_float_() const;
  private:
  bool _internal_has_float_() const;
  public:
  void clear_float_();
  float float_() const;
  void set_float_(float value);
  private:
  float _internal_float_() const;
  void _internal_set_float_(float value);
  public:

  // optional bool bool = 2;
  bool has_bool_() const;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  bool bool_() const;
  void set_bool_(bool value);
  private:
  bool _internal_bool_() const;
  void _internal_set_bool_(bool value);
  public:

  // optional sint64 sint64 = 5;
  bool has_sint64() const;
  private:
  bool _internal_has_sint64() const;
  public:
  void clear_sint64();
  ::PROTOBUF_NAMESPACE_ID::int64 sint64() const;
  void set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sint64() const;
  void _internal_set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional sint32 sint32 = 4;
  bool has_sint32() const;
  private:
  bool _internal_has_sint32() const;
  public:
  void clear_sint32();
  ::PROTOBUF_NAMESPACE_ID::int32 sint32() const;
  void set_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sint32() const;
  void _internal_set_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed32 fixed32 = 6;
  bool has_fixed32() const;
  private:
  bool _internal_has_fixed32() const;
  public:
  void clear_fixed32();
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed32() const;
  void set_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fixed32() const;
  void _internal_set_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 fixed64 = 7;
  bool has_fixed64() const;
  private:
  bool _internal_has_fixed64() const;
  public:
  void clear_fixed64();
  ::PROTOBUF_NAMESPACE_ID::uint64 fixed64() const;
  void set_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fixed64() const;
  void _internal_set_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional sfixed64 sfixed64 = 9;
  bool has_sfixed64() const;
  private:
  bool _internal_has_sfixed64() const;
  public:
  void clear_sfixed64();
  ::PROTOBUF_NAMESPACE_ID::int64 sfixed64() const;
  void set_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sfixed64() const;
  void _internal_set_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional sfixed32 sfixed32 = 8;
  bool has_sfixed32() const;
  private:
  bool _internal_has_sfixed32() const;
  public:
  void clear_sfixed32();
  ::PROTOBUF_NAMESPACE_ID::int32 sfixed32() const;
  void set_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sfixed32() const;
  void _internal_set_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .Enum enum = 11;
  bool has_enum_() const;
  private:
  bool _internal_has_enum_() const;
  public:
  void clear_enum_();
  ::Enum enum_() const;
  void set_enum_(::Enum value);
  private:
  ::Enum _internal_enum_() const;
  void _internal_set_enum_(::Enum value);
  public:

  // @@protoc_insertion_point(class_scope:Optional)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
  float float__;
  bool bool__;
  ::PROTOBUF_NAMESPACE_ID::int64 sint64_;
  ::PROTOBUF_NAMESPACE_ID::int32 sint32_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed32_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_;
  ::PROTOBUF_NAMESPACE_ID::int64 sfixed64_;
  ::PROTOBUF_NAMESPACE_ID::int32 sfixed32_;
  int enum__;
  friend struct ::TableStruct_schema_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class Required PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Required) */ {
 public:
  inline Required() : Required(nullptr) {};
  virtual ~Required();

  Required(const Required& from);
  Required(Required&& from) noexcept
    : Required() {
    *this = ::std::move(from);
  }

  inline Required& operator=(const Required& from) {
    CopyFrom(from);
    return *this;
  }
  inline Required& operator=(Required&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Required& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Required* internal_default_instance() {
    return reinterpret_cast<const Required*>(
               &_Required_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Required& a, Required& b) {
    a.Swap(&b);
  }
  inline void Swap(Required* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Required* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Required* New() const final {
    return CreateMaybeMessage<Required>(nullptr);
  }

  Required* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Required>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Required& from);
  void MergeFrom(const Required& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Required* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Required";
  }
  protected:
  explicit Required(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2fmessage_2eproto);
    return ::descriptor_table_schema_2fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesFieldNumber = 3,
    kStringFieldNumber = 10,
    kFloatFieldNumber = 1,
    kBoolFieldNumber = 2,
    kSint64FieldNumber = 5,
    kSint32FieldNumber = 4,
    kFixed32FieldNumber = 6,
    kFixed64FieldNumber = 7,
    kSfixed64FieldNumber = 9,
    kSfixed32FieldNumber = 8,
    kEnumFieldNumber = 11,
  };
  // required bytes bytes = 3;
  bool has_bytes() const;
  private:
  bool _internal_has_bytes() const;
  public:
  void clear_bytes();
  const std::string& bytes() const;
  void set_bytes(const std::string& value);
  void set_bytes(std::string&& value);
  void set_bytes(const char* value);
  void set_bytes(const void* value, size_t size);
  std::string* mutable_bytes();
  std::string* release_bytes();
  void set_allocated_bytes(std::string* bytes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bytes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bytes(
      std::string* bytes);
  private:
  const std::string& _internal_bytes() const;
  void _internal_set_bytes(const std::string& value);
  std::string* _internal_mutable_bytes();
  public:

  // required string string = 10;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  void set_string(const std::string& value);
  void set_string(std::string&& value);
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  std::string* mutable_string();
  std::string* release_string();
  void set_allocated_string(std::string* string);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_string();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_string(
      std::string* string);
  private:
  const std::string& _internal_string() const;
  void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  // required float float = 1;
  bool has_float_() const;
  private:
  bool _internal_has_float_() const;
  public:
  void clear_float_();
  float float_() const;
  void set_float_(float value);
  private:
  float _internal_float_() const;
  void _internal_set_float_(float value);
  public:

  // required bool bool = 2;
  bool has_bool_() const;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  bool bool_() const;
  void set_bool_(bool value);
  private:
  bool _internal_bool_() const;
  void _internal_set_bool_(bool value);
  public:

  // required sint64 sint64 = 5;
  bool has_sint64() const;
  private:
  bool _internal_has_sint64() const;
  public:
  void clear_sint64();
  ::PROTOBUF_NAMESPACE_ID::int64 sint64() const;
  void set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sint64() const;
  void _internal_set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required sint32 sint32 = 4;
  bool has_sint32() const;
  private:
  bool _internal_has_sint32() const;
  public:
  void clear_sint32();
  ::PROTOBUF_NAMESPACE_ID::int32 sint32() const;
  void set_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sint32() const;
  void _internal_set_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required fixed32 fixed32 = 6;
  bool has_fixed32() const;
  private:
  bool _internal_has_fixed32() const;
  public:
  void clear_fixed32();
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed32() const;
  void set_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fixed32() const;
  void _internal_set_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required fixed64 fixed64 = 7;
  bool has_fixed64() const;
  private:
  bool _internal_has_fixed64() const;
  public:
  void clear_fixed64();
  ::PROTOBUF_NAMESPACE_ID::uint64 fixed64() const;
  void set_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fixed64() const;
  void _internal_set_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required sfixed64 sfixed64 = 9;
  bool has_sfixed64() const;
  private:
  bool _internal_has_sfixed64() const;
  public:
  void clear_sfixed64();
  ::PROTOBUF_NAMESPACE_ID::int64 sfixed64() const;
  void set_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sfixed64() const;
  void _internal_set_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required sfixed32 sfixed32 = 8;
  bool has_sfixed32() const;
  private:
  bool _internal_has_sfixed32() const;
  public:
  void clear_sfixed32();
  ::PROTOBUF_NAMESPACE_ID::int32 sfixed32() const;
  void set_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sfixed32() const;
  void _internal_set_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .Enum enum = 11;
  bool has_enum_() const;
  private:
  bool _internal_has_enum_() const;
  public:
  void clear_enum_();
  ::Enum enum_() const;
  void set_enum_(::Enum value);
  private:
  ::Enum _internal_enum_() const;
  void _internal_set_enum_(::Enum value);
  public:

  // @@protoc_insertion_point(class_scope:Required)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
  float float__;
  bool bool__;
  ::PROTOBUF_NAMESPACE_ID::int64 sint64_;
  ::PROTOBUF_NAMESPACE_ID::int32 sint32_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed32_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_;
  ::PROTOBUF_NAMESPACE_ID::int64 sfixed64_;
  ::PROTOBUF_NAMESPACE_ID::int32 sfixed32_;
  int enum__;
  friend struct ::TableStruct_schema_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class Repeated PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Repeated) */ {
 public:
  inline Repeated() : Repeated(nullptr) {};
  virtual ~Repeated();

  Repeated(const Repeated& from);
  Repeated(Repeated&& from) noexcept
    : Repeated() {
    *this = ::std::move(from);
  }

  inline Repeated& operator=(const Repeated& from) {
    CopyFrom(from);
    return *this;
  }
  inline Repeated& operator=(Repeated&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Repeated& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Repeated* internal_default_instance() {
    return reinterpret_cast<const Repeated*>(
               &_Repeated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Repeated& a, Repeated& b) {
    a.Swap(&b);
  }
  inline void Swap(Repeated* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Repeated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Repeated* New() const final {
    return CreateMaybeMessage<Repeated>(nullptr);
  }

  Repeated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Repeated>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Repeated& from);
  void MergeFrom(const Repeated& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Repeated* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Repeated";
  }
  protected:
  explicit Repeated(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2fmessage_2eproto);
    return ::descriptor_table_schema_2fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatFieldNumber = 1,
    kBoolFieldNumber = 2,
    kBytesFieldNumber = 3,
    kSint32FieldNumber = 4,
    kSint64FieldNumber = 5,
    kFixed32FieldNumber = 6,
    kFixed64FieldNumber = 7,
    kSfixed32FieldNumber = 8,
    kSfixed64FieldNumber = 9,
    kStringFieldNumber = 10,
    kEnumFieldNumber = 11,
  };
  // repeated float float = 1 [packed = true];
  int float__size() const;
  private:
  int _internal_float__size() const;
  public:
  void clear_float_();
  private:
  float _internal_float_(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_() const;
  void _internal_add_float_(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_();
  public:
  float float_(int index) const;
  void set_float_(int index, float value);
  void add_float_(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_();

  // repeated bool bool = 2 [packed = true];
  int bool__size() const;
  private:
  int _internal_bool__size() const;
  public:
  void clear_bool_();
  private:
  bool _internal_bool_(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_bool_() const;
  void _internal_add_bool_(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_bool_();
  public:
  bool bool_(int index) const;
  void set_bool_(int index, bool value);
  void add_bool_(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      bool_() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_bool_();

  // repeated bytes bytes = 3;
  int bytes_size() const;
  private:
  int _internal_bytes_size() const;
  public:
  void clear_bytes();
  const std::string& bytes(int index) const;
  std::string* mutable_bytes(int index);
  void set_bytes(int index, const std::string& value);
  void set_bytes(int index, std::string&& value);
  void set_bytes(int index, const char* value);
  void set_bytes(int index, const void* value, size_t size);
  std::string* add_bytes();
  void add_bytes(const std::string& value);
  void add_bytes(std::string&& value);
  void add_bytes(const char* value);
  void add_bytes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bytes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bytes();
  private:
  const std::string& _internal_bytes(int index) const;
  std::string* _internal_add_bytes();
  public:

  // repeated sint32 sint32 = 4 [packed = true];
  int sint32_size() const;
  private:
  int _internal_sint32_size() const;
  public:
  void clear_sint32();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sint32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_sint32() const;
  void _internal_add_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_sint32();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 sint32(int index) const;
  void set_sint32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      sint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_sint32();

  // repeated sint64 sint64 = 5 [packed = true];
  int sint64_size() const;
  private:
  int _internal_sint64_size() const;
  public:
  void clear_sint64();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sint64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_sint64() const;
  void _internal_add_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_sint64();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 sint64(int index) const;
  void set_sint64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      sint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_sint64();

  // repeated fixed32 fixed32 = 6 [packed = true];
  int fixed32_size() const;
  private:
  int _internal_fixed32_size() const;
  public:
  void clear_fixed32();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fixed32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_fixed32() const;
  void _internal_add_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_fixed32();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed32(int index) const;
  void set_fixed32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      fixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_fixed32();

  // repeated fixed64 fixed64 = 7 [packed = true];
  int fixed64_size() const;
  private:
  int _internal_fixed64_size() const;
  public:
  void clear_fixed64();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fixed64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_fixed64() const;
  void _internal_add_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_fixed64();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 fixed64(int index) const;
  void set_fixed64(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      fixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_fixed64();

  // repeated sfixed32 sfixed32 = 8 [packed = true];
  int sfixed32_size() const;
  private:
  int _internal_sfixed32_size() const;
  public:
  void clear_sfixed32();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sfixed32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_sfixed32() const;
  void _internal_add_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_sfixed32();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 sfixed32(int index) const;
  void set_sfixed32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      sfixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_sfixed32();

  // repeated sfixed64 sfixed64 = 9 [packed = true];
  int sfixed64_size() const;
  private:
  int _internal_sfixed64_size() const;
  public:
  void clear_sfixed64();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sfixed64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_sfixed64() const;
  void _internal_add_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_sfixed64();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 sfixed64(int index) const;
  void set_sfixed64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      sfixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_sfixed64();

  // repeated string string = 10;
  int string_size() const;
  private:
  int _internal_string_size() const;
  public:
  void clear_string();
  const std::string& string(int index) const;
  std::string* mutable_string(int index);
  void set_string(int index, const std::string& value);
  void set_string(int index, std::string&& value);
  void set_string(int index, const char* value);
  void set_string(int index, const char* value, size_t size);
  std::string* add_string();
  void add_string(const std::string& value);
  void add_string(std::string&& value);
  void add_string(const char* value);
  void add_string(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string();
  private:
  const std::string& _internal_string(int index) const;
  std::string* _internal_add_string();
  public:

  // repeated .Enum enum = 11 [packed = true];
  int enum__size() const;
  private:
  int _internal_enum__size() const;
  public:
  void clear_enum_();
  private:
  ::Enum _internal_enum_(int index) const;
  void _internal_add_enum_(::Enum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_enum_();
  public:
  ::Enum enum_(int index) const;
  void set_enum_(int index, ::Enum value);
  void add_enum_(::Enum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& enum_() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_enum_();

  // @@protoc_insertion_point(class_scope:Repeated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float__;
  mutable std::atomic<int> _float__cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > bool__;
  mutable std::atomic<int> _bool__cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bytes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > sint32_;
  mutable std::atomic<int> _sint32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > sint64_;
  mutable std::atomic<int> _sint64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > fixed32_;
  mutable std::atomic<int> _fixed32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > fixed64_;
  mutable std::atomic<int> _fixed64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > sfixed32_;
  mutable std::atomic<int> _sfixed32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > sfixed64_;
  mutable std::atomic<int> _sfixed64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> enum__;
  mutable std::atomic<int> _enum__cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class UnPacked PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnPacked) */ {
 public:
  inline UnPacked() : UnPacked(nullptr) {};
  virtual ~UnPacked();

  UnPacked(const UnPacked& from);
  UnPacked(UnPacked&& from) noexcept
    : UnPacked() {
    *this = ::std::move(from);
  }

  inline UnPacked& operator=(const UnPacked& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnPacked& operator=(UnPacked&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnPacked& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnPacked* internal_default_instance() {
    return reinterpret_cast<const UnPacked*>(
               &_UnPacked_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UnPacked& a, UnPacked& b) {
    a.Swap(&b);
  }
  inline void Swap(UnPacked* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnPacked* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnPacked* New() const final {
    return CreateMaybeMessage<UnPacked>(nullptr);
  }

  UnPacked* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnPacked>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnPacked& from);
  void MergeFrom(const UnPacked& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnPacked* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnPacked";
  }
  protected:
  explicit UnPacked(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2fmessage_2eproto);
    return ::descriptor_table_schema_2fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatFieldNumber = 1,
    kBoolFieldNumber = 2,
    kSint32FieldNumber = 4,
    kSint64FieldNumber = 5,
    kFixed32FieldNumber = 6,
    kFixed64FieldNumber = 7,
    kSfixed32FieldNumber = 8,
    kSfixed64FieldNumber = 9,
    kEnumFieldNumber = 11,
  };
  // repeated float float = 1;
  int float__size() const;
  private:
  int _internal_float__size() const;
  public:
  void clear_float_();
  private:
  float _internal_float_(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_() const;
  void _internal_add_float_(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_();
  public:
  float float_(int index) const;
  void set_float_(int index, float value);
  void add_float_(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_();

  // repeated bool bool = 2;
  int bool__size() const;
  private:
  int _internal_bool__size() const;
  public:
  void clear_bool_();
  private:
  bool _internal_bool_(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_bool_() const;
  void _internal_add_bool_(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_bool_();
  public:
  bool bool_(int index) const;
  void set_bool_(int index, bool value);
  void add_bool_(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      bool_() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_bool_();

  // repeated sint32 sint32 = 4;
  int sint32_size() const;
  private:
  int _internal_sint32_size() const;
  public:
  void clear_sint32();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sint32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_sint32() const;
  void _internal_add_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_sint32();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 sint32(int index) const;
  void set_sint32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      sint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_sint32();

  // repeated sint64 sint64 = 5;
  int sint64_size() const;
  private:
  int _internal_sint64_size() const;
  public:
  void clear_sint64();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sint64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_sint64() const;
  void _internal_add_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_sint64();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 sint64(int index) const;
  void set_sint64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      sint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_sint64();

  // repeated fixed32 fixed32 = 6;
  int fixed32_size() const;
  private:
  int _internal_fixed32_size() const;
  public:
  void clear_fixed32();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fixed32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_fixed32() const;
  void _internal_add_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_fixed32();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed32(int index) const;
  void set_fixed32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      fixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_fixed32();

  // repeated fixed64 fixed64 = 7;
  int fixed64_size() const;
  private:
  int _internal_fixed64_size() const;
  public:
  void clear_fixed64();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fixed64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_fixed64() const;
  void _internal_add_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_fixed64();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 fixed64(int index) const;
  void set_fixed64(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      fixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_fixed64();

  // repeated sfixed32 sfixed32 = 8;
  int sfixed32_size() const;
  private:
  int _internal_sfixed32_size() const;
  public:
  void clear_sfixed32();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sfixed32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_sfixed32() const;
  void _internal_add_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_sfixed32();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 sfixed32(int index) const;
  void set_sfixed32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      sfixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_sfixed32();

  // repeated sfixed64 sfixed64 = 9;
  int sfixed64_size() const;
  private:
  int _internal_sfixed64_size() const;
  public:
  void clear_sfixed64();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sfixed64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_sfixed64() const;
  void _internal_add_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_sfixed64();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 sfixed64(int index) const;
  void set_sfixed64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      sfixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_sfixed64();

  // repeated .Enum enum = 11;
  int enum__size() const;
  private:
  int _internal_enum__size() const;
  public:
  void clear_enum_();
  private:
  ::Enum _internal_enum_(int index) const;
  void _internal_add_enum_(::Enum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_enum_();
  public:
  ::Enum enum_(int index) const;
  void set_enum_(int index, ::Enum value);
  void add_enum_(::Enum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& enum_() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_enum_();

  // @@protoc_insertion_point(class_scope:UnPacked)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > bool__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > sint32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > sint64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > fixed32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > fixed64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > sfixed32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > sfixed64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> enum__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message) */ {
 public:
  inline Message() : Message(nullptr) {};
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2fmessage_2eproto);
    return ::descriptor_table_schema_2fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionalFieldNumber = 1,
    kRequiredFieldNumber = 2,
    kRepeatedFieldNumber = 3,
    kUnpackedFieldNumber = 4,
  };
  // repeated .Optional optional = 1;
  int optional_size() const;
  private:
  int _internal_optional_size() const;
  public:
  void clear_optional();
  ::Optional* mutable_optional(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Optional >*
      mutable_optional();
  private:
  const ::Optional& _internal_optional(int index) const;
  ::Optional* _internal_add_optional();
  public:
  const ::Optional& optional(int index) const;
  ::Optional* add_optional();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Optional >&
      optional() const;

  // repeated .Required required = 2;
  int required_size() const;
  private:
  int _internal_required_size() const;
  public:
  void clear_required();
  ::Required* mutable_required(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Required >*
      mutable_required();
  private:
  const ::Required& _internal_required(int index) const;
  ::Required* _internal_add_required();
  public:
  const ::Required& required(int index) const;
  ::Required* add_required();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Required >&
      required() const;

  // repeated .Repeated repeated = 3;
  int repeated_size() const;
  private:
  int _internal_repeated_size() const;
  public:
  void clear_repeated();
  ::Repeated* mutable_repeated(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Repeated >*
      mutable_repeated();
  private:
  const ::Repeated& _internal_repeated(int index) const;
  ::Repeated* _internal_add_repeated();
  public:
  const ::Repeated& repeated(int index) const;
  ::Repeated* add_repeated();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Repeated >&
      repeated() const;

  // repeated .UnPacked unpacked = 4;
  int unpacked_size() const;
  private:
  int _internal_unpacked_size() const;
  public:
  void clear_unpacked();
  ::UnPacked* mutable_unpacked(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnPacked >*
      mutable_unpacked();
  private:
  const ::UnPacked& _internal_unpacked(int index) const;
  ::UnPacked* _internal_add_unpacked();
  public:
  const ::UnPacked& unpacked(int index) const;
  ::UnPacked* add_unpacked();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnPacked >&
      unpacked() const;

  // @@protoc_insertion_point(class_scope:Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Optional > optional_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Required > required_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Repeated > repeated_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnPacked > unpacked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Optional

// optional float float = 1;
inline bool Optional::_internal_has_float_() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Optional::has_float_() const {
  return _internal_has_float_();
}
inline void Optional::clear_float_() {
  float__ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Optional::_internal_float_() const {
  return float__;
}
inline float Optional::float_() const {
  // @@protoc_insertion_point(field_get:Optional.float)
  return _internal_float_();
}
inline void Optional::_internal_set_float_(float value) {
  _has_bits_[0] |= 0x00000004u;
  float__ = value;
}
inline void Optional::set_float_(float value) {
  _internal_set_float_(value);
  // @@protoc_insertion_point(field_set:Optional.float)
}

// optional bool bool = 2;
inline bool Optional::_internal_has_bool_() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Optional::has_bool_() const {
  return _internal_has_bool_();
}
inline void Optional::clear_bool_() {
  bool__ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Optional::_internal_bool_() const {
  return bool__;
}
inline bool Optional::bool_() const {
  // @@protoc_insertion_point(field_get:Optional.bool)
  return _internal_bool_();
}
inline void Optional::_internal_set_bool_(bool value) {
  _has_bits_[0] |= 0x00000008u;
  bool__ = value;
}
inline void Optional::set_bool_(bool value) {
  _internal_set_bool_(value);
  // @@protoc_insertion_point(field_set:Optional.bool)
}

// optional bytes bytes = 3;
inline bool Optional::_internal_has_bytes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Optional::has_bytes() const {
  return _internal_has_bytes();
}
inline void Optional::clear_bytes() {
  bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Optional::bytes() const {
  // @@protoc_insertion_point(field_get:Optional.bytes)
  return _internal_bytes();
}
inline void Optional::set_bytes(const std::string& value) {
  _internal_set_bytes(value);
  // @@protoc_insertion_point(field_set:Optional.bytes)
}
inline std::string* Optional::mutable_bytes() {
  // @@protoc_insertion_point(field_mutable:Optional.bytes)
  return _internal_mutable_bytes();
}
inline const std::string& Optional::_internal_bytes() const {
  return bytes_.Get();
}
inline void Optional::_internal_set_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Optional::set_bytes(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Optional.bytes)
}
inline void Optional::set_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Optional.bytes)
}
inline void Optional::set_bytes(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Optional.bytes)
}
inline std::string* Optional::_internal_mutable_bytes() {
  _has_bits_[0] |= 0x00000001u;
  return bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Optional::release_bytes() {
  // @@protoc_insertion_point(field_release:Optional.bytes)
  if (!_internal_has_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return bytes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Optional::set_allocated_bytes(std::string* bytes) {
  if (bytes != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Optional.bytes)
}
inline std::string* Optional::unsafe_arena_release_bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Optional.bytes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return bytes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Optional::unsafe_arena_set_allocated_bytes(
    std::string* bytes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bytes != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bytes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bytes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Optional.bytes)
}

// optional sint32 sint32 = 4;
inline bool Optional::_internal_has_sint32() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Optional::has_sint32() const {
  return _internal_has_sint32();
}
inline void Optional::clear_sint32() {
  sint32_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Optional::_internal_sint32() const {
  return sint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Optional::sint32() const {
  // @@protoc_insertion_point(field_get:Optional.sint32)
  return _internal_sint32();
}
inline void Optional::_internal_set_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  sint32_ = value;
}
inline void Optional::set_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sint32(value);
  // @@protoc_insertion_point(field_set:Optional.sint32)
}

// optional sint64 sint64 = 5;
inline bool Optional::_internal_has_sint64() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Optional::has_sint64() const {
  return _internal_has_sint64();
}
inline void Optional::clear_sint64() {
  sint64_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Optional::_internal_sint64() const {
  return sint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Optional::sint64() const {
  // @@protoc_insertion_point(field_get:Optional.sint64)
  return _internal_sint64();
}
inline void Optional::_internal_set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  sint64_ = value;
}
inline void Optional::set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sint64(value);
  // @@protoc_insertion_point(field_set:Optional.sint64)
}

// optional fixed32 fixed32 = 6;
inline bool Optional::_internal_has_fixed32() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Optional::has_fixed32() const {
  return _internal_has_fixed32();
}
inline void Optional::clear_fixed32() {
  fixed32_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Optional::_internal_fixed32() const {
  return fixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Optional::fixed32() const {
  // @@protoc_insertion_point(field_get:Optional.fixed32)
  return _internal_fixed32();
}
inline void Optional::_internal_set_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  fixed32_ = value;
}
inline void Optional::set_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fixed32(value);
  // @@protoc_insertion_point(field_set:Optional.fixed32)
}

// optional fixed64 fixed64 = 7;
inline bool Optional::_internal_has_fixed64() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Optional::has_fixed64() const {
  return _internal_has_fixed64();
}
inline void Optional::clear_fixed64() {
  fixed64_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Optional::_internal_fixed64() const {
  return fixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Optional::fixed64() const {
  // @@protoc_insertion_point(field_get:Optional.fixed64)
  return _internal_fixed64();
}
inline void Optional::_internal_set_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  fixed64_ = value;
}
inline void Optional::set_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fixed64(value);
  // @@protoc_insertion_point(field_set:Optional.fixed64)
}

// optional sfixed32 sfixed32 = 8;
inline bool Optional::_internal_has_sfixed32() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Optional::has_sfixed32() const {
  return _internal_has_sfixed32();
}
inline void Optional::clear_sfixed32() {
  sfixed32_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Optional::_internal_sfixed32() const {
  return sfixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Optional::sfixed32() const {
  // @@protoc_insertion_point(field_get:Optional.sfixed32)
  return _internal_sfixed32();
}
inline void Optional::_internal_set_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  sfixed32_ = value;
}
inline void Optional::set_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sfixed32(value);
  // @@protoc_insertion_point(field_set:Optional.sfixed32)
}

// optional sfixed64 sfixed64 = 9;
inline bool Optional::_internal_has_sfixed64() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Optional::has_sfixed64() const {
  return _internal_has_sfixed64();
}
inline void Optional::clear_sfixed64() {
  sfixed64_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Optional::_internal_sfixed64() const {
  return sfixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Optional::sfixed64() const {
  // @@protoc_insertion_point(field_get:Optional.sfixed64)
  return _internal_sfixed64();
}
inline void Optional::_internal_set_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  sfixed64_ = value;
}
inline void Optional::set_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sfixed64(value);
  // @@protoc_insertion_point(field_set:Optional.sfixed64)
}

// optional string string = 10;
inline bool Optional::_internal_has_string() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Optional::has_string() const {
  return _internal_has_string();
}
inline void Optional::clear_string() {
  string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Optional::string() const {
  // @@protoc_insertion_point(field_get:Optional.string)
  return _internal_string();
}
inline void Optional::set_string(const std::string& value) {
  _internal_set_string(value);
  // @@protoc_insertion_point(field_set:Optional.string)
}
inline std::string* Optional::mutable_string() {
  // @@protoc_insertion_point(field_mutable:Optional.string)
  return _internal_mutable_string();
}
inline const std::string& Optional::_internal_string() const {
  return string_.Get();
}
inline void Optional::_internal_set_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Optional::set_string(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Optional.string)
}
inline void Optional::set_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Optional.string)
}
inline void Optional::set_string(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Optional.string)
}
inline std::string* Optional::_internal_mutable_string() {
  _has_bits_[0] |= 0x00000002u;
  return string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Optional::release_string() {
  // @@protoc_insertion_point(field_release:Optional.string)
  if (!_internal_has_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Optional::set_allocated_string(std::string* string) {
  if (string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Optional.string)
}
inline std::string* Optional::unsafe_arena_release_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Optional.string)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return string_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Optional::unsafe_arena_set_allocated_string(
    std::string* string) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  string_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      string, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Optional.string)
}

// optional .Enum enum = 11;
inline bool Optional::_internal_has_enum_() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Optional::has_enum_() const {
  return _internal_has_enum_();
}
inline void Optional::clear_enum_() {
  enum__ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::Enum Optional::_internal_enum_() const {
  return static_cast< ::Enum >(enum__);
}
inline ::Enum Optional::enum_() const {
  // @@protoc_insertion_point(field_get:Optional.enum)
  return _internal_enum_();
}
inline void Optional::_internal_set_enum_(::Enum value) {
  assert(::Enum_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  enum__ = value;
}
inline void Optional::set_enum_(::Enum value) {
  _internal_set_enum_(value);
  // @@protoc_insertion_point(field_set:Optional.enum)
}

// -------------------------------------------------------------------

// Required

// required float float = 1;
inline bool Required::_internal_has_float_() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Required::has_float_() const {
  return _internal_has_float_();
}
inline void Required::clear_float_() {
  float__ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Required::_internal_float_() const {
  return float__;
}
inline float Required::float_() const {
  // @@protoc_insertion_point(field_get:Required.float)
  return _internal_float_();
}
inline void Required::_internal_set_float_(float value) {
  _has_bits_[0] |= 0x00000004u;
  float__ = value;
}
inline void Required::set_float_(float value) {
  _internal_set_float_(value);
  // @@protoc_insertion_point(field_set:Required.float)
}

// required bool bool = 2;
inline bool Required::_internal_has_bool_() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Required::has_bool_() const {
  return _internal_has_bool_();
}
inline void Required::clear_bool_() {
  bool__ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Required::_internal_bool_() const {
  return bool__;
}
inline bool Required::bool_() const {
  // @@protoc_insertion_point(field_get:Required.bool)
  return _internal_bool_();
}
inline void Required::_internal_set_bool_(bool value) {
  _has_bits_[0] |= 0x00000008u;
  bool__ = value;
}
inline void Required::set_bool_(bool value) {
  _internal_set_bool_(value);
  // @@protoc_insertion_point(field_set:Required.bool)
}

// required bytes bytes = 3;
inline bool Required::_internal_has_bytes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Required::has_bytes() const {
  return _internal_has_bytes();
}
inline void Required::clear_bytes() {
  bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Required::bytes() const {
  // @@protoc_insertion_point(field_get:Required.bytes)
  return _internal_bytes();
}
inline void Required::set_bytes(const std::string& value) {
  _internal_set_bytes(value);
  // @@protoc_insertion_point(field_set:Required.bytes)
}
inline std::string* Required::mutable_bytes() {
  // @@protoc_insertion_point(field_mutable:Required.bytes)
  return _internal_mutable_bytes();
}
inline const std::string& Required::_internal_bytes() const {
  return bytes_.Get();
}
inline void Required::_internal_set_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Required::set_bytes(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Required.bytes)
}
inline void Required::set_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Required.bytes)
}
inline void Required::set_bytes(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Required.bytes)
}
inline std::string* Required::_internal_mutable_bytes() {
  _has_bits_[0] |= 0x00000001u;
  return bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Required::release_bytes() {
  // @@protoc_insertion_point(field_release:Required.bytes)
  if (!_internal_has_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return bytes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Required::set_allocated_bytes(std::string* bytes) {
  if (bytes != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Required.bytes)
}
inline std::string* Required::unsafe_arena_release_bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Required.bytes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return bytes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Required::unsafe_arena_set_allocated_bytes(
    std::string* bytes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bytes != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bytes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bytes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Required.bytes)
}

// required sint32 sint32 = 4;
inline bool Required::_internal_has_sint32() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Required::has_sint32() const {
  return _internal_has_sint32();
}
inline void Required::clear_sint32() {
  sint32_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Required::_internal_sint32() const {
  return sint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Required::sint32() const {
  // @@protoc_insertion_point(field_get:Required.sint32)
  return _internal_sint32();
}
inline void Required::_internal_set_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  sint32_ = value;
}
inline void Required::set_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sint32(value);
  // @@protoc_insertion_point(field_set:Required.sint32)
}

// required sint64 sint64 = 5;
inline bool Required::_internal_has_sint64() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Required::has_sint64() const {
  return _internal_has_sint64();
}
inline void Required::clear_sint64() {
  sint64_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Required::_internal_sint64() const {
  return sint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Required::sint64() const {
  // @@protoc_insertion_point(field_get:Required.sint64)
  return _internal_sint64();
}
inline void Required::_internal_set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  sint64_ = value;
}
inline void Required::set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sint64(value);
  // @@protoc_insertion_point(field_set:Required.sint64)
}

// required fixed32 fixed32 = 6;
inline bool Required::_internal_has_fixed32() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Required::has_fixed32() const {
  return _internal_has_fixed32();
}
inline void Required::clear_fixed32() {
  fixed32_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Required::_internal_fixed32() const {
  return fixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Required::fixed32() const {
  // @@protoc_insertion_point(field_get:Required.fixed32)
  return _internal_fixed32();
}
inline void Required::_internal_set_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  fixed32_ = value;
}
inline void Required::set_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fixed32(value);
  // @@protoc_insertion_point(field_set:Required.fixed32)
}

// required fixed64 fixed64 = 7;
inline bool Required::_internal_has_fixed64() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Required::has_fixed64() const {
  return _internal_has_fixed64();
}
inline void Required::clear_fixed64() {
  fixed64_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Required::_internal_fixed64() const {
  return fixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Required::fixed64() const {
  // @@protoc_insertion_point(field_get:Required.fixed64)
  return _internal_fixed64();
}
inline void Required::_internal_set_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  fixed64_ = value;
}
inline void Required::set_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fixed64(value);
  // @@protoc_insertion_point(field_set:Required.fixed64)
}

// required sfixed32 sfixed32 = 8;
inline bool Required::_internal_has_sfixed32() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Required::has_sfixed32() const {
  return _internal_has_sfixed32();
}
inline void Required::clear_sfixed32() {
  sfixed32_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Required::_internal_sfixed32() const {
  return sfixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Required::sfixed32() const {
  // @@protoc_insertion_point(field_get:Required.sfixed32)
  return _internal_sfixed32();
}
inline void Required::_internal_set_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  sfixed32_ = value;
}
inline void Required::set_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sfixed32(value);
  // @@protoc_insertion_point(field_set:Required.sfixed32)
}

// required sfixed64 sfixed64 = 9;
inline bool Required::_internal_has_sfixed64() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Required::has_sfixed64() const {
  return _internal_has_sfixed64();
}
inline void Required::clear_sfixed64() {
  sfixed64_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Required::_internal_sfixed64() const {
  return sfixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Required::sfixed64() const {
  // @@protoc_insertion_point(field_get:Required.sfixed64)
  return _internal_sfixed64();
}
inline void Required::_internal_set_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  sfixed64_ = value;
}
inline void Required::set_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sfixed64(value);
  // @@protoc_insertion_point(field_set:Required.sfixed64)
}

// required string string = 10;
inline bool Required::_internal_has_string() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Required::has_string() const {
  return _internal_has_string();
}
inline void Required::clear_string() {
  string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Required::string() const {
  // @@protoc_insertion_point(field_get:Required.string)
  return _internal_string();
}
inline void Required::set_string(const std::string& value) {
  _internal_set_string(value);
  // @@protoc_insertion_point(field_set:Required.string)
}
inline std::string* Required::mutable_string() {
  // @@protoc_insertion_point(field_mutable:Required.string)
  return _internal_mutable_string();
}
inline const std::string& Required::_internal_string() const {
  return string_.Get();
}
inline void Required::_internal_set_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Required::set_string(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Required.string)
}
inline void Required::set_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Required.string)
}
inline void Required::set_string(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Required.string)
}
inline std::string* Required::_internal_mutable_string() {
  _has_bits_[0] |= 0x00000002u;
  return string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Required::release_string() {
  // @@protoc_insertion_point(field_release:Required.string)
  if (!_internal_has_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Required::set_allocated_string(std::string* string) {
  if (string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Required.string)
}
inline std::string* Required::unsafe_arena_release_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Required.string)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return string_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Required::unsafe_arena_set_allocated_string(
    std::string* string) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  string_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      string, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Required.string)
}

// required .Enum enum = 11;
inline bool Required::_internal_has_enum_() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Required::has_enum_() const {
  return _internal_has_enum_();
}
inline void Required::clear_enum_() {
  enum__ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::Enum Required::_internal_enum_() const {
  return static_cast< ::Enum >(enum__);
}
inline ::Enum Required::enum_() const {
  // @@protoc_insertion_point(field_get:Required.enum)
  return _internal_enum_();
}
inline void Required::_internal_set_enum_(::Enum value) {
  assert(::Enum_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  enum__ = value;
}
inline void Required::set_enum_(::Enum value) {
  _internal_set_enum_(value);
  // @@protoc_insertion_point(field_set:Required.enum)
}

// -------------------------------------------------------------------

// Repeated

// repeated float float = 1 [packed = true];
inline int Repeated::_internal_float__size() const {
  return float__.size();
}
inline int Repeated::float__size() const {
  return _internal_float__size();
}
inline void Repeated::clear_float_() {
  float__.Clear();
}
inline float Repeated::_internal_float_(int index) const {
  return float__.Get(index);
}
inline float Repeated::float_(int index) const {
  // @@protoc_insertion_point(field_get:Repeated.float)
  return _internal_float_(index);
}
inline void Repeated::set_float_(int index, float value) {
  float__.Set(index, value);
  // @@protoc_insertion_point(field_set:Repeated.float)
}
inline void Repeated::_internal_add_float_(float value) {
  float__.Add(value);
}
inline void Repeated::add_float_(float value) {
  _internal_add_float_(value);
  // @@protoc_insertion_point(field_add:Repeated.float)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Repeated::_internal_float_() const {
  return float__;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Repeated::float_() const {
  // @@protoc_insertion_point(field_list:Repeated.float)
  return _internal_float_();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Repeated::_internal_mutable_float_() {
  return &float__;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Repeated::mutable_float_() {
  // @@protoc_insertion_point(field_mutable_list:Repeated.float)
  return _internal_mutable_float_();
}

// repeated bool bool = 2 [packed = true];
inline int Repeated::_internal_bool__size() const {
  return bool__.size();
}
inline int Repeated::bool__size() const {
  return _internal_bool__size();
}
inline void Repeated::clear_bool_() {
  bool__.Clear();
}
inline bool Repeated::_internal_bool_(int index) const {
  return bool__.Get(index);
}
inline bool Repeated::bool_(int index) const {
  // @@protoc_insertion_point(field_get:Repeated.bool)
  return _internal_bool_(index);
}
inline void Repeated::set_bool_(int index, bool value) {
  bool__.Set(index, value);
  // @@protoc_insertion_point(field_set:Repeated.bool)
}
inline void Repeated::_internal_add_bool_(bool value) {
  bool__.Add(value);
}
inline void Repeated::add_bool_(bool value) {
  _internal_add_bool_(value);
  // @@protoc_insertion_point(field_add:Repeated.bool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Repeated::_internal_bool_() const {
  return bool__;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Repeated::bool_() const {
  // @@protoc_insertion_point(field_list:Repeated.bool)
  return _internal_bool_();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Repeated::_internal_mutable_bool_() {
  return &bool__;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Repeated::mutable_bool_() {
  // @@protoc_insertion_point(field_mutable_list:Repeated.bool)
  return _internal_mutable_bool_();
}

// repeated bytes bytes = 3;
inline int Repeated::_internal_bytes_size() const {
  return bytes_.size();
}
inline int Repeated::bytes_size() const {
  return _internal_bytes_size();
}
inline void Repeated::clear_bytes() {
  bytes_.Clear();
}
inline std::string* Repeated::add_bytes() {
  // @@protoc_insertion_point(field_add_mutable:Repeated.bytes)
  return _internal_add_bytes();
}
inline const std::string& Repeated::_internal_bytes(int index) const {
  return bytes_.Get(index);
}
inline const std::string& Repeated::bytes(int index) const {
  // @@protoc_insertion_point(field_get:Repeated.bytes)
  return _internal_bytes(index);
}
inline std::string* Repeated::mutable_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:Repeated.bytes)
  return bytes_.Mutable(index);
}
inline void Repeated::set_bytes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Repeated.bytes)
  bytes_.Mutable(index)->assign(value);
}
inline void Repeated::set_bytes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Repeated.bytes)
  bytes_.Mutable(index)->assign(std::move(value));
}
inline void Repeated::set_bytes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Repeated.bytes)
}
inline void Repeated::set_bytes(int index, const void* value, size_t size) {
  bytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Repeated.bytes)
}
inline std::string* Repeated::_internal_add_bytes() {
  return bytes_.Add();
}
inline void Repeated::add_bytes(const std::string& value) {
  bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Repeated.bytes)
}
inline void Repeated::add_bytes(std::string&& value) {
  bytes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Repeated.bytes)
}
inline void Repeated::add_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Repeated.bytes)
}
inline void Repeated::add_bytes(const void* value, size_t size) {
  bytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Repeated.bytes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Repeated::bytes() const {
  // @@protoc_insertion_point(field_list:Repeated.bytes)
  return bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Repeated::mutable_bytes() {
  // @@protoc_insertion_point(field_mutable_list:Repeated.bytes)
  return &bytes_;
}

// repeated sint32 sint32 = 4 [packed = true];
inline int Repeated::_internal_sint32_size() const {
  return sint32_.size();
}
inline int Repeated::sint32_size() const {
  return _internal_sint32_size();
}
inline void Repeated::clear_sint32() {
  sint32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Repeated::_internal_sint32(int index) const {
  return sint32_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Repeated::sint32(int index) const {
  // @@protoc_insertion_point(field_get:Repeated.sint32)
  return _internal_sint32(index);
}
inline void Repeated::set_sint32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  sint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Repeated.sint32)
}
inline void Repeated::_internal_add_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  sint32_.Add(value);
}
inline void Repeated::add_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_sint32(value);
  // @@protoc_insertion_point(field_add:Repeated.sint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Repeated::_internal_sint32() const {
  return sint32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Repeated::sint32() const {
  // @@protoc_insertion_point(field_list:Repeated.sint32)
  return _internal_sint32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Repeated::_internal_mutable_sint32() {
  return &sint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Repeated::mutable_sint32() {
  // @@protoc_insertion_point(field_mutable_list:Repeated.sint32)
  return _internal_mutable_sint32();
}

// repeated sint64 sint64 = 5 [packed = true];
inline int Repeated::_internal_sint64_size() const {
  return sint64_.size();
}
inline int Repeated::sint64_size() const {
  return _internal_sint64_size();
}
inline void Repeated::clear_sint64() {
  sint64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Repeated::_internal_sint64(int index) const {
  return sint64_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Repeated::sint64(int index) const {
  // @@protoc_insertion_point(field_get:Repeated.sint64)
  return _internal_sint64(index);
}
inline void Repeated::set_sint64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  sint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:Repeated.sint64)
}
inline void Repeated::_internal_add_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  sint64_.Add(value);
}
inline void Repeated::add_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_sint64(value);
  // @@protoc_insertion_point(field_add:Repeated.sint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Repeated::_internal_sint64() const {
  return sint64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Repeated::sint64() const {
  // @@protoc_insertion_point(field_list:Repeated.sint64)
  return _internal_sint64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Repeated::_internal_mutable_sint64() {
  return &sint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Repeated::mutable_sint64() {
  // @@protoc_insertion_point(field_mutable_list:Repeated.sint64)
  return _internal_mutable_sint64();
}

// repeated fixed32 fixed32 = 6 [packed = true];
inline int Repeated::_internal_fixed32_size() const {
  return fixed32_.size();
}
inline int Repeated::fixed32_size() const {
  return _internal_fixed32_size();
}
inline void Repeated::clear_fixed32() {
  fixed32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Repeated::_internal_fixed32(int index) const {
  return fixed32_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Repeated::fixed32(int index) const {
  // @@protoc_insertion_point(field_get:Repeated.fixed32)
  return _internal_fixed32(index);
}
inline void Repeated::set_fixed32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Repeated.fixed32)
}
inline void Repeated::_internal_add_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fixed32_.Add(value);
}
inline void Repeated::add_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_fixed32(value);
  // @@protoc_insertion_point(field_add:Repeated.fixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Repeated::_internal_fixed32() const {
  return fixed32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Repeated::fixed32() const {
  // @@protoc_insertion_point(field_list:Repeated.fixed32)
  return _internal_fixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Repeated::_internal_mutable_fixed32() {
  return &fixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Repeated::mutable_fixed32() {
  // @@protoc_insertion_point(field_mutable_list:Repeated.fixed32)
  return _internal_mutable_fixed32();
}

// repeated fixed64 fixed64 = 7 [packed = true];
inline int Repeated::_internal_fixed64_size() const {
  return fixed64_.size();
}
inline int Repeated::fixed64_size() const {
  return _internal_fixed64_size();
}
inline void Repeated::clear_fixed64() {
  fixed64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Repeated::_internal_fixed64(int index) const {
  return fixed64_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Repeated::fixed64(int index) const {
  // @@protoc_insertion_point(field_get:Repeated.fixed64)
  return _internal_fixed64(index);
}
inline void Repeated::set_fixed64(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  fixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:Repeated.fixed64)
}
inline void Repeated::_internal_add_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  fixed64_.Add(value);
}
inline void Repeated::add_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_fixed64(value);
  // @@protoc_insertion_point(field_add:Repeated.fixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Repeated::_internal_fixed64() const {
  return fixed64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Repeated::fixed64() const {
  // @@protoc_insertion_point(field_list:Repeated.fixed64)
  return _internal_fixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Repeated::_internal_mutable_fixed64() {
  return &fixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Repeated::mutable_fixed64() {
  // @@protoc_insertion_point(field_mutable_list:Repeated.fixed64)
  return _internal_mutable_fixed64();
}

// repeated sfixed32 sfixed32 = 8 [packed = true];
inline int Repeated::_internal_sfixed32_size() const {
  return sfixed32_.size();
}
inline int Repeated::sfixed32_size() const {
  return _internal_sfixed32_size();
}
inline void Repeated::clear_sfixed32() {
  sfixed32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Repeated::_internal_sfixed32(int index) const {
  return sfixed32_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Repeated::sfixed32(int index) const {
  // @@protoc_insertion_point(field_get:Repeated.sfixed32)
  return _internal_sfixed32(index);
}
inline void Repeated::set_sfixed32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  sfixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Repeated.sfixed32)
}
inline void Repeated::_internal_add_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  sfixed32_.Add(value);
}
inline void Repeated::add_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_sfixed32(value);
  // @@protoc_insertion_point(field_add:Repeated.sfixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Repeated::_internal_sfixed32() const {
  return sfixed32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Repeated::sfixed32() const {
  // @@protoc_insertion_point(field_list:Repeated.sfixed32)
  return _internal_sfixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Repeated::_internal_mutable_sfixed32() {
  return &sfixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Repeated::mutable_sfixed32() {
  // @@protoc_insertion_point(field_mutable_list:Repeated.sfixed32)
  return _internal_mutable_sfixed32();
}

// repeated sfixed64 sfixed64 = 9 [packed = true];
inline int Repeated::_internal_sfixed64_size() const {
  return sfixed64_.size();
}
inline int Repeated::sfixed64_size() const {
  return _internal_sfixed64_size();
}
inline void Repeated::clear_sfixed64() {
  sfixed64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Repeated::_internal_sfixed64(int index) const {
  return sfixed64_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Repeated::sfixed64(int index) const {
  // @@protoc_insertion_point(field_get:Repeated.sfixed64)
  return _internal_sfixed64(index);
}
inline void Repeated::set_sfixed64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  sfixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:Repeated.sfixed64)
}
inline void Repeated::_internal_add_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  sfixed64_.Add(value);
}
inline void Repeated::add_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_sfixed64(value);
  // @@protoc_insertion_point(field_add:Repeated.sfixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Repeated::_internal_sfixed64() const {
  return sfixed64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Repeated::sfixed64() const {
  // @@protoc_insertion_point(field_list:Repeated.sfixed64)
  return _internal_sfixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Repeated::_internal_mutable_sfixed64() {
  return &sfixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Repeated::mutable_sfixed64() {
  // @@protoc_insertion_point(field_mutable_list:Repeated.sfixed64)
  return _internal_mutable_sfixed64();
}

// repeated string string = 10;
inline int Repeated::_internal_string_size() const {
  return string_.size();
}
inline int Repeated::string_size() const {
  return _internal_string_size();
}
inline void Repeated::clear_string() {
  string_.Clear();
}
inline std::string* Repeated::add_string() {
  // @@protoc_insertion_point(field_add_mutable:Repeated.string)
  return _internal_add_string();
}
inline const std::string& Repeated::_internal_string(int index) const {
  return string_.Get(index);
}
inline const std::string& Repeated::string(int index) const {
  // @@protoc_insertion_point(field_get:Repeated.string)
  return _internal_string(index);
}
inline std::string* Repeated::mutable_string(int index) {
  // @@protoc_insertion_point(field_mutable:Repeated.string)
  return string_.Mutable(index);
}
inline void Repeated::set_string(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Repeated.string)
  string_.Mutable(index)->assign(value);
}
inline void Repeated::set_string(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Repeated.string)
  string_.Mutable(index)->assign(std::move(value));
}
inline void Repeated::set_string(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Repeated.string)
}
inline void Repeated::set_string(int index, const char* value, size_t size) {
  string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Repeated.string)
}
inline std::string* Repeated::_internal_add_string() {
  return string_.Add();
}
inline void Repeated::add_string(const std::string& value) {
  string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Repeated.string)
}
inline void Repeated::add_string(std::string&& value) {
  string_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Repeated.string)
}
inline void Repeated::add_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Repeated.string)
}
inline void Repeated::add_string(const char* value, size_t size) {
  string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Repeated.string)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Repeated::string() const {
  // @@protoc_insertion_point(field_list:Repeated.string)
  return string_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Repeated::mutable_string() {
  // @@protoc_insertion_point(field_mutable_list:Repeated.string)
  return &string_;
}

// repeated .Enum enum = 11 [packed = true];
inline int Repeated::_internal_enum__size() const {
  return enum__.size();
}
inline int Repeated::enum__size() const {
  return _internal_enum__size();
}
inline void Repeated::clear_enum_() {
  enum__.Clear();
}
inline ::Enum Repeated::_internal_enum_(int index) const {
  return static_cast< ::Enum >(enum__.Get(index));
}
inline ::Enum Repeated::enum_(int index) const {
  // @@protoc_insertion_point(field_get:Repeated.enum)
  return _internal_enum_(index);
}
inline void Repeated::set_enum_(int index, ::Enum value) {
  assert(::Enum_IsValid(value));
  enum__.Set(index, value);
  // @@protoc_insertion_point(field_set:Repeated.enum)
}
inline void Repeated::_internal_add_enum_(::Enum value) {
  assert(::Enum_IsValid(value));
  enum__.Add(value);
}
inline void Repeated::add_enum_(::Enum value) {
  // @@protoc_insertion_point(field_add:Repeated.enum)
  _internal_add_enum_(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Repeated::enum_() const {
  // @@protoc_insertion_point(field_list:Repeated.enum)
  return enum__;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Repeated::_internal_mutable_enum_() {
  return &enum__;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Repeated::mutable_enum_() {
  // @@protoc_insertion_point(field_mutable_list:Repeated.enum)
  return _internal_mutable_enum_();
}

// -------------------------------------------------------------------

// UnPacked

// repeated float float = 1;
inline int UnPacked::_internal_float__size() const {
  return float__.size();
}
inline int UnPacked::float__size() const {
  return _internal_float__size();
}
inline void UnPacked::clear_float_() {
  float__.Clear();
}
inline float UnPacked::_internal_float_(int index) const {
  return float__.Get(index);
}
inline float UnPacked::float_(int index) const {
  // @@protoc_insertion_point(field_get:UnPacked.float)
  return _internal_float_(index);
}
inline void UnPacked::set_float_(int index, float value) {
  float__.Set(index, value);
  // @@protoc_insertion_point(field_set:UnPacked.float)
}
inline void UnPacked::_internal_add_float_(float value) {
  float__.Add(value);
}
inline void UnPacked::add_float_(float value) {
  _internal_add_float_(value);
  // @@protoc_insertion_point(field_add:UnPacked.float)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
UnPacked::_internal_float_() const {
  return float__;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
UnPacked::float_() const {
  // @@protoc_insertion_point(field_list:UnPacked.float)
  return _internal_float_();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
UnPacked::_internal_mutable_float_() {
  return &float__;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
UnPacked::mutable_float_() {
  // @@protoc_insertion_point(field_mutable_list:UnPacked.float)
  return _internal_mutable_float_();
}

// repeated bool bool = 2;
inline int UnPacked::_internal_bool__size() const {
  return bool__.size();
}
inline int UnPacked::bool__size() const {
  return _internal_bool__size();
}
inline void UnPacked::clear_bool_() {
  bool__.Clear();
}
inline bool UnPacked::_internal_bool_(int index) const {
  return bool__.Get(index);
}
inline bool UnPacked::bool_(int index) const {
  // @@protoc_insertion_point(field_get:UnPacked.bool)
  return _internal_bool_(index);
}
inline void UnPacked::set_bool_(int index, bool value) {
  bool__.Set(index, value);
  // @@protoc_insertion_point(field_set:UnPacked.bool)
}
inline void UnPacked::_internal_add_bool_(bool value) {
  bool__.Add(value);
}
inline void UnPacked::add_bool_(bool value) {
  _internal_add_bool_(value);
  // @@protoc_insertion_point(field_add:UnPacked.bool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
UnPacked::_internal_bool_() const {
  return bool__;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
UnPacked::bool_() const {
  // @@protoc_insertion_point(field_list:UnPacked.bool)
  return _internal_bool_();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
UnPacked::_internal_mutable_bool_() {
  return &bool__;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
UnPacked::mutable_bool_() {
  // @@protoc_insertion_point(field_mutable_list:UnPacked.bool)
  return _internal_mutable_bool_();
}

// repeated sint32 sint32 = 4;
inline int UnPacked::_internal_sint32_size() const {
  return sint32_.size();
}
inline int UnPacked::sint32_size() const {
  return _internal_sint32_size();
}
inline void UnPacked::clear_sint32() {
  sint32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnPacked::_internal_sint32(int index) const {
  return sint32_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnPacked::sint32(int index) const {
  // @@protoc_insertion_point(field_get:UnPacked.sint32)
  return _internal_sint32(index);
}
inline void UnPacked::set_sint32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  sint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:UnPacked.sint32)
}
inline void UnPacked::_internal_add_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  sint32_.Add(value);
}
inline void UnPacked::add_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_sint32(value);
  // @@protoc_insertion_point(field_add:UnPacked.sint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UnPacked::_internal_sint32() const {
  return sint32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UnPacked::sint32() const {
  // @@protoc_insertion_point(field_list:UnPacked.sint32)
  return _internal_sint32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UnPacked::_internal_mutable_sint32() {
  return &sint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UnPacked::mutable_sint32() {
  // @@protoc_insertion_point(field_mutable_list:UnPacked.sint32)
  return _internal_mutable_sint32();
}

// repeated sint64 sint64 = 5;
inline int UnPacked::_internal_sint64_size() const {
  return sint64_.size();
}
inline int UnPacked::sint64_size() const {
  return _internal_sint64_size();
}
inline void UnPacked::clear_sint64() {
  sint64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UnPacked::_internal_sint64(int index) const {
  return sint64_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UnPacked::sint64(int index) const {
  // @@protoc_insertion_point(field_get:UnPacked.sint64)
  return _internal_sint64(index);
}
inline void UnPacked::set_sint64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  sint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:UnPacked.sint64)
}
inline void UnPacked::_internal_add_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  sint64_.Add(value);
}
inline void UnPacked::add_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_sint64(value);
  // @@protoc_insertion_point(field_add:UnPacked.sint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
UnPacked::_internal_sint64() const {
  return sint64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
UnPacked::sint64() const {
  // @@protoc_insertion_point(field_list:UnPacked.sint64)
  return _internal_sint64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
UnPacked::_internal_mutable_sint64() {
  return &sint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
UnPacked::mutable_sint64() {
  // @@protoc_insertion_point(field_mutable_list:UnPacked.sint64)
  return _internal_mutable_sint64();
}

// repeated fixed32 fixed32 = 6;
inline int UnPacked::_internal_fixed32_size() const {
  return fixed32_.size();
}
inline int UnPacked::fixed32_size() const {
  return _internal_fixed32_size();
}
inline void UnPacked::clear_fixed32() {
  fixed32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnPacked::_internal_fixed32(int index) const {
  return fixed32_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnPacked::fixed32(int index) const {
  // @@protoc_insertion_point(field_get:UnPacked.fixed32)
  return _internal_fixed32(index);
}
inline void UnPacked::set_fixed32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:UnPacked.fixed32)
}
inline void UnPacked::_internal_add_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fixed32_.Add(value);
}
inline void UnPacked::add_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_fixed32(value);
  // @@protoc_insertion_point(field_add:UnPacked.fixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UnPacked::_internal_fixed32() const {
  return fixed32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UnPacked::fixed32() const {
  // @@protoc_insertion_point(field_list:UnPacked.fixed32)
  return _internal_fixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UnPacked::_internal_mutable_fixed32() {
  return &fixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UnPacked::mutable_fixed32() {
  // @@protoc_insertion_point(field_mutable_list:UnPacked.fixed32)
  return _internal_mutable_fixed32();
}

// repeated fixed64 fixed64 = 7;
inline int UnPacked::_internal_fixed64_size() const {
  return fixed64_.size();
}
inline int UnPacked::fixed64_size() const {
  return _internal_fixed64_size();
}
inline void UnPacked::clear_fixed64() {
  fixed64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnPacked::_internal_fixed64(int index) const {
  return fixed64_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnPacked::fixed64(int index) const {
  // @@protoc_insertion_point(field_get:UnPacked.fixed64)
  return _internal_fixed64(index);
}
inline void UnPacked::set_fixed64(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  fixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:UnPacked.fixed64)
}
inline void UnPacked::_internal_add_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  fixed64_.Add(value);
}
inline void UnPacked::add_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_fixed64(value);
  // @@protoc_insertion_point(field_add:UnPacked.fixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
UnPacked::_internal_fixed64() const {
  return fixed64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
UnPacked::fixed64() const {
  // @@protoc_insertion_point(field_list:UnPacked.fixed64)
  return _internal_fixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
UnPacked::_internal_mutable_fixed64() {
  return &fixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
UnPacked::mutable_fixed64() {
  // @@protoc_insertion_point(field_mutable_list:UnPacked.fixed64)
  return _internal_mutable_fixed64();
}

// repeated sfixed32 sfixed32 = 8;
inline int UnPacked::_internal_sfixed32_size() const {
  return sfixed32_.size();
}
inline int UnPacked::sfixed32_size() const {
  return _internal_sfixed32_size();
}
inline void UnPacked::clear_sfixed32() {
  sfixed32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnPacked::_internal_sfixed32(int index) const {
  return sfixed32_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnPacked::sfixed32(int index) const {
  // @@protoc_insertion_point(field_get:UnPacked.sfixed32)
  return _internal_sfixed32(index);
}
inline void UnPacked::set_sfixed32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  sfixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:UnPacked.sfixed32)
}
inline void UnPacked::_internal_add_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  sfixed32_.Add(value);
}
inline void UnPacked::add_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_sfixed32(value);
  // @@protoc_insertion_point(field_add:UnPacked.sfixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UnPacked::_internal_sfixed32() const {
  return sfixed32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UnPacked::sfixed32() const {
  // @@protoc_insertion_point(field_list:UnPacked.sfixed32)
  return _internal_sfixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UnPacked::_internal_mutable_sfixed32() {
  return &sfixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UnPacked::mutable_sfixed32() {
  // @@protoc_insertion_point(field_mutable_list:UnPacked.sfixed32)
  return _internal_mutable_sfixed32();
}

// repeated sfixed64 sfixed64 = 9;
inline int UnPacked::_internal_sfixed64_size() const {
  return sfixed64_.size();
}
inline int UnPacked::sfixed64_size() const {
  return _internal_sfixed64_size();
}
inline void UnPacked::clear_sfixed64() {
  sfixed64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UnPacked::_internal_sfixed64(int index) const {
  return sfixed64_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UnPacked::sfixed64(int index) const {
  // @@protoc_insertion_point(field_get:UnPacked.sfixed64)
  return _internal_sfixed64(index);
}
inline void UnPacked::set_sfixed64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  sfixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:UnPacked.sfixed64)
}
inline void UnPacked::_internal_add_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  sfixed64_.Add(value);
}
inline void UnPacked::add_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_sfixed64(value);
  // @@protoc_insertion_point(field_add:UnPacked.sfixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
UnPacked::_internal_sfixed64() const {
  return sfixed64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
UnPacked::sfixed64() const {
  // @@protoc_insertion_point(field_list:UnPacked.sfixed64)
  return _internal_sfixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
UnPacked::_internal_mutable_sfixed64() {
  return &sfixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
UnPacked::mutable_sfixed64() {
  // @@protoc_insertion_point(field_mutable_list:UnPacked.sfixed64)
  return _internal_mutable_sfixed64();
}

// repeated .Enum enum = 11;
inline int UnPacked::_internal_enum__size() const {
  return enum__.size();
}
inline int UnPacked::enum__size() const {
  return _internal_enum__size();
}
inline void UnPacked::clear_enum_() {
  enum__.Clear();
}
inline ::Enum UnPacked::_internal_enum_(int index) const {
  return static_cast< ::Enum >(enum__.Get(index));
}
inline ::Enum UnPacked::enum_(int index) const {
  // @@protoc_insertion_point(field_get:UnPacked.enum)
  return _internal_enum_(index);
}
inline void UnPacked::set_enum_(int index, ::Enum value) {
  assert(::Enum_IsValid(value));
  enum__.Set(index, value);
  // @@protoc_insertion_point(field_set:UnPacked.enum)
}
inline void UnPacked::_internal_add_enum_(::Enum value) {
  assert(::Enum_IsValid(value));
  enum__.Add(value);
}
inline void UnPacked::add_enum_(::Enum value) {
  // @@protoc_insertion_point(field_add:UnPacked.enum)
  _internal_add_enum_(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
UnPacked::enum_() const {
  // @@protoc_insertion_point(field_list:UnPacked.enum)
  return enum__;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
UnPacked::_internal_mutable_enum_() {
  return &enum__;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
UnPacked::mutable_enum_() {
  // @@protoc_insertion_point(field_mutable_list:UnPacked.enum)
  return _internal_mutable_enum_();
}

// -------------------------------------------------------------------

// Message

// repeated .Optional optional = 1;
inline int Message::_internal_optional_size() const {
  return optional_.size();
}
inline int Message::optional_size() const {
  return _internal_optional_size();
}
inline void Message::clear_optional() {
  optional_.Clear();
}
inline ::Optional* Message::mutable_optional(int index) {
  // @@protoc_insertion_point(field_mutable:Message.optional)
  return optional_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Optional >*
Message::mutable_optional() {
  // @@protoc_insertion_point(field_mutable_list:Message.optional)
  return &optional_;
}
inline const ::Optional& Message::_internal_optional(int index) const {
  return optional_.Get(index);
}
inline const ::Optional& Message::optional(int index) const {
  // @@protoc_insertion_point(field_get:Message.optional)
  return _internal_optional(index);
}
inline ::Optional* Message::_internal_add_optional() {
  return optional_.Add();
}
inline ::Optional* Message::add_optional() {
  // @@protoc_insertion_point(field_add:Message.optional)
  return _internal_add_optional();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Optional >&
Message::optional() const {
  // @@protoc_insertion_point(field_list:Message.optional)
  return optional_;
}

// repeated .Required required = 2;
inline int Message::_internal_required_size() const {
  return required_.size();
}
inline int Message::required_size() const {
  return _internal_required_size();
}
inline void Message::clear_required() {
  required_.Clear();
}
inline ::Required* Message::mutable_required(int index) {
  // @@protoc_insertion_point(field_mutable:Message.required)
  return required_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Required >*
Message::mutable_required() {
  // @@protoc_insertion_point(field_mutable_list:Message.required)
  return &required_;
}
inline const ::Required& Message::_internal_required(int index) const {
  return required_.Get(index);
}
inline const ::Required& Message::required(int index) const {
  // @@protoc_insertion_point(field_get:Message.required)
  return _internal_required(index);
}
inline ::Required* Message::_internal_add_required() {
  return required_.Add();
}
inline ::Required* Message::add_required() {
  // @@protoc_insertion_point(field_add:Message.required)
  return _internal_add_required();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Required >&
Message::required() const {
  // @@protoc_insertion_point(field_list:Message.required)
  return required_;
}

// repeated .Repeated repeated = 3;
inline int Message::_internal_repeated_size() const {
  return repeated_.size();
}
inline int Message::repeated_size() const {
  return _internal_repeated_size();
}
inline void Message::clear_repeated() {
  repeated_.Clear();
}
inline ::Repeated* Message::mutable_repeated(int index) {
  // @@protoc_insertion_point(field_mutable:Message.repeated)
  return repeated_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Repeated >*
Message::mutable_repeated() {
  // @@protoc_insertion_point(field_mutable_list:Message.repeated)
  return &repeated_;
}
inline const ::Repeated& Message::_internal_repeated(int index) const {
  return repeated_.Get(index);
}
inline const ::Repeated& Message::repeated(int index) const {
  // @@protoc_insertion_point(field_get:Message.repeated)
  return _internal_repeated(index);
}
inline ::Repeated* Message::_internal_add_repeated() {
  return repeated_.Add();
}
inline ::Repeated* Message::add_repeated() {
  // @@protoc_insertion_point(field_add:Message.repeated)
  return _internal_add_repeated();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Repeated >&
Message::repeated() const {
  // @@protoc_insertion_point(field_list:Message.repeated)
  return repeated_;
}

// repeated .UnPacked unpacked = 4;
inline int Message::_internal_unpacked_size() const {
  return unpacked_.size();
}
inline int Message::unpacked_size() const {
  return _internal_unpacked_size();
}
inline void Message::clear_unpacked() {
  unpacked_.Clear();
}
inline ::UnPacked* Message::mutable_unpacked(int index) {
  // @@protoc_insertion_point(field_mutable:Message.unpacked)
  return unpacked_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnPacked >*
Message::mutable_unpacked() {
  // @@protoc_insertion_point(field_mutable_list:Message.unpacked)
  return &unpacked_;
}
inline const ::UnPacked& Message::_internal_unpacked(int index) const {
  return unpacked_.Get(index);
}
inline const ::UnPacked& Message::unpacked(int index) const {
  // @@protoc_insertion_point(field_get:Message.unpacked)
  return _internal_unpacked(index);
}
inline ::UnPacked* Message::_internal_add_unpacked() {
  return unpacked_.Add();
}
inline ::UnPacked* Message::add_unpacked() {
  // @@protoc_insertion_point(field_add:Message.unpacked)
  return _internal_add_unpacked();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnPacked >&
Message::unpacked() const {
  // @@protoc_insertion_point(field_list:Message.unpacked)
  return unpacked_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Enum>() {
  return ::Enum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_schema_2fmessage_2eproto
