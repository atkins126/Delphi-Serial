// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema/message.proto

#include "schema/message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_schema_2fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Default_schema_2fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Optional_schema_2fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Repeated_schema_2fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Required_schema_2fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnPacked_schema_2fmessage_2eproto;
class OptionalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Optional> _instance;
} _Optional_default_instance_;
class DefaultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Default> _instance;
} _Default_default_instance_;
class RequiredDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Required> _instance;
} _Required_default_instance_;
class RepeatedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Repeated> _instance;
} _Repeated_default_instance_;
class UnPackedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnPacked> _instance;
} _UnPacked_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message> _instance;
} _Message_default_instance_;
static void InitDefaultsscc_info_Default_schema_2fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Default::_i_give_permission_to_break_this_code_default_string_.DefaultConstruct();
  *::Default::_i_give_permission_to_break_this_code_default_string_.get_mutable() = std::string("a", 1);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::Default::_i_give_permission_to_break_this_code_default_string_.get_mutable());
  ::Default::_i_give_permission_to_break_this_code_default_bytes_.DefaultConstruct();
  *::Default::_i_give_permission_to_break_this_code_default_bytes_.get_mutable() = std::string("\253\016", 2);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::Default::_i_give_permission_to_break_this_code_default_bytes_.get_mutable());
  {
    void* ptr = &::_Default_default_instance_;
    new (ptr) ::Default();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Default::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Default_schema_2fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Default_schema_2fmessage_2eproto}, {}};

static void InitDefaultsscc_info_Message_schema_2fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Message_default_instance_;
    new (ptr) ::Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Message_schema_2fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Message_schema_2fmessage_2eproto}, {
      &scc_info_Optional_schema_2fmessage_2eproto.base,
      &scc_info_Default_schema_2fmessage_2eproto.base,
      &scc_info_Required_schema_2fmessage_2eproto.base,
      &scc_info_Repeated_schema_2fmessage_2eproto.base,
      &scc_info_UnPacked_schema_2fmessage_2eproto.base,}};

static void InitDefaultsscc_info_Optional_schema_2fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Optional_default_instance_;
    new (ptr) ::Optional();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Optional::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Optional_schema_2fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Optional_schema_2fmessage_2eproto}, {}};

static void InitDefaultsscc_info_Repeated_schema_2fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Repeated_default_instance_;
    new (ptr) ::Repeated();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Repeated::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Repeated_schema_2fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Repeated_schema_2fmessage_2eproto}, {}};

static void InitDefaultsscc_info_Required_schema_2fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Required_default_instance_;
    new (ptr) ::Required();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Required::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Required_schema_2fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Required_schema_2fmessage_2eproto}, {}};

static void InitDefaultsscc_info_UnPacked_schema_2fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnPacked_default_instance_;
    new (ptr) ::UnPacked();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnPacked::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnPacked_schema_2fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnPacked_schema_2fmessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_schema_2fmessage_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_schema_2fmessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_schema_2fmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_schema_2fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Optional, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Optional, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Optional, double__),
  PROTOBUF_FIELD_OFFSET(::Optional, float__),
  PROTOBUF_FIELD_OFFSET(::Optional, int32_),
  PROTOBUF_FIELD_OFFSET(::Optional, int64_),
  PROTOBUF_FIELD_OFFSET(::Optional, uint32_),
  PROTOBUF_FIELD_OFFSET(::Optional, uint64_),
  PROTOBUF_FIELD_OFFSET(::Optional, sint32_),
  PROTOBUF_FIELD_OFFSET(::Optional, sint64_),
  PROTOBUF_FIELD_OFFSET(::Optional, fixed32_),
  PROTOBUF_FIELD_OFFSET(::Optional, fixed64_),
  PROTOBUF_FIELD_OFFSET(::Optional, sfixed32_),
  PROTOBUF_FIELD_OFFSET(::Optional, sfixed64_),
  PROTOBUF_FIELD_OFFSET(::Optional, bool__),
  PROTOBUF_FIELD_OFFSET(::Optional, string_),
  PROTOBUF_FIELD_OFFSET(::Optional, bytes_),
  PROTOBUF_FIELD_OFFSET(::Optional, enum__),
  2,
  3,
  4,
  5,
  7,
  6,
  8,
  9,
  11,
  10,
  12,
  13,
  14,
  0,
  1,
  15,
  PROTOBUF_FIELD_OFFSET(::Default, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Default, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Default, double__),
  PROTOBUF_FIELD_OFFSET(::Default, float__),
  PROTOBUF_FIELD_OFFSET(::Default, int32_),
  PROTOBUF_FIELD_OFFSET(::Default, int64_),
  PROTOBUF_FIELD_OFFSET(::Default, uint32_),
  PROTOBUF_FIELD_OFFSET(::Default, uint64_),
  PROTOBUF_FIELD_OFFSET(::Default, sint32_),
  PROTOBUF_FIELD_OFFSET(::Default, sint64_),
  PROTOBUF_FIELD_OFFSET(::Default, fixed32_),
  PROTOBUF_FIELD_OFFSET(::Default, fixed64_),
  PROTOBUF_FIELD_OFFSET(::Default, sfixed32_),
  PROTOBUF_FIELD_OFFSET(::Default, sfixed64_),
  PROTOBUF_FIELD_OFFSET(::Default, bool__),
  PROTOBUF_FIELD_OFFSET(::Default, string_),
  PROTOBUF_FIELD_OFFSET(::Default, bytes_),
  PROTOBUF_FIELD_OFFSET(::Default, enum__),
  2,
  3,
  4,
  5,
  7,
  6,
  8,
  9,
  11,
  10,
  12,
  13,
  14,
  0,
  1,
  15,
  PROTOBUF_FIELD_OFFSET(::Required, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Required, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Required, double__),
  PROTOBUF_FIELD_OFFSET(::Required, float__),
  PROTOBUF_FIELD_OFFSET(::Required, int32_),
  PROTOBUF_FIELD_OFFSET(::Required, int64_),
  PROTOBUF_FIELD_OFFSET(::Required, uint32_),
  PROTOBUF_FIELD_OFFSET(::Required, uint64_),
  PROTOBUF_FIELD_OFFSET(::Required, sint32_),
  PROTOBUF_FIELD_OFFSET(::Required, sint64_),
  PROTOBUF_FIELD_OFFSET(::Required, fixed32_),
  PROTOBUF_FIELD_OFFSET(::Required, fixed64_),
  PROTOBUF_FIELD_OFFSET(::Required, sfixed32_),
  PROTOBUF_FIELD_OFFSET(::Required, sfixed64_),
  PROTOBUF_FIELD_OFFSET(::Required, bool__),
  PROTOBUF_FIELD_OFFSET(::Required, string_),
  PROTOBUF_FIELD_OFFSET(::Required, bytes_),
  PROTOBUF_FIELD_OFFSET(::Required, enum__),
  2,
  3,
  4,
  5,
  7,
  6,
  8,
  9,
  11,
  10,
  12,
  13,
  14,
  0,
  1,
  15,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Repeated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Repeated, double__),
  PROTOBUF_FIELD_OFFSET(::Repeated, float__),
  PROTOBUF_FIELD_OFFSET(::Repeated, int32_),
  PROTOBUF_FIELD_OFFSET(::Repeated, int64_),
  PROTOBUF_FIELD_OFFSET(::Repeated, uint32_),
  PROTOBUF_FIELD_OFFSET(::Repeated, uint64_),
  PROTOBUF_FIELD_OFFSET(::Repeated, sint32_),
  PROTOBUF_FIELD_OFFSET(::Repeated, sint64_),
  PROTOBUF_FIELD_OFFSET(::Repeated, fixed32_),
  PROTOBUF_FIELD_OFFSET(::Repeated, fixed64_),
  PROTOBUF_FIELD_OFFSET(::Repeated, sfixed32_),
  PROTOBUF_FIELD_OFFSET(::Repeated, sfixed64_),
  PROTOBUF_FIELD_OFFSET(::Repeated, bool__),
  PROTOBUF_FIELD_OFFSET(::Repeated, string_),
  PROTOBUF_FIELD_OFFSET(::Repeated, bytes_),
  PROTOBUF_FIELD_OFFSET(::Repeated, enum__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnPacked, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnPacked, double__),
  PROTOBUF_FIELD_OFFSET(::UnPacked, float__),
  PROTOBUF_FIELD_OFFSET(::UnPacked, int32_),
  PROTOBUF_FIELD_OFFSET(::UnPacked, int64_),
  PROTOBUF_FIELD_OFFSET(::UnPacked, uint32_),
  PROTOBUF_FIELD_OFFSET(::UnPacked, uint64_),
  PROTOBUF_FIELD_OFFSET(::UnPacked, sint32_),
  PROTOBUF_FIELD_OFFSET(::UnPacked, sint64_),
  PROTOBUF_FIELD_OFFSET(::UnPacked, fixed32_),
  PROTOBUF_FIELD_OFFSET(::UnPacked, fixed64_),
  PROTOBUF_FIELD_OFFSET(::UnPacked, sfixed32_),
  PROTOBUF_FIELD_OFFSET(::UnPacked, sfixed64_),
  PROTOBUF_FIELD_OFFSET(::UnPacked, bool__),
  PROTOBUF_FIELD_OFFSET(::UnPacked, enum__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Message, optional_),
  PROTOBUF_FIELD_OFFSET(::Message, default__),
  PROTOBUF_FIELD_OFFSET(::Message, required_),
  PROTOBUF_FIELD_OFFSET(::Message, repeated_),
  PROTOBUF_FIELD_OFFSET(::Message, unpacked_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, sizeof(::Optional)},
  { 37, 58, sizeof(::Default)},
  { 74, 95, sizeof(::Required)},
  { 111, -1, sizeof(::Repeated)},
  { 132, -1, sizeof(::UnPacked)},
  { 151, -1, sizeof(::Message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Optional_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Default_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Required_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Repeated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnPacked_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Message_default_instance_),
};

const char descriptor_table_protodef_schema_2fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024schema/message.proto\"\217\002\n\010Optional\022\016\n\006d"
  "ouble\030\001 \001(\001\022\r\n\005float\030\002 \001(\002\022\r\n\005int32\030\003 \001("
  "\005\022\r\n\005int64\030\004 \001(\003\022\016\n\006uint32\030\005 \001(\r\022\016\n\006uint"
  "64\030\006 \001(\004\022\016\n\006sint32\030\007 \001(\021\022\016\n\006sint64\030\010 \001(\022"
  "\022\017\n\007fixed32\030\t \001(\007\022\017\n\007fixed64\030\n \001(\006\022\020\n\010sf"
  "ixed32\030\013 \001(\017\022\020\n\010sfixed64\030\014 \001(\020\022\014\n\004bool\030\r"
  " \001(\010\022\016\n\006string\030\016 \001(\t\022\r\n\005bytes\030\017 \001(\014\022\023\n\004e"
  "num\030\020 \001(\0162\005.Enum\"\315\002\n\007Default\022\021\n\006double\030\001"
  " \001(\001:\0011\022\020\n\005float\030\002 \001(\002:\0011\022\020\n\005int32\030\003 \001(\005"
  ":\0011\022\020\n\005int64\030\004 \001(\003:\0011\022\021\n\006uint32\030\005 \001(\r:\0011"
  "\022\021\n\006uint64\030\006 \001(\004:\0011\022\021\n\006sint32\030\007 \001(\021:\0011\022\021"
  "\n\006sint64\030\010 \001(\022:\0011\022\022\n\007fixed32\030\t \001(\007:\0011\022\022\n"
  "\007fixed64\030\n \001(\006:\0011\022\023\n\010sfixed32\030\013 \001(\017:\0011\022\023"
  "\n\010sfixed64\030\014 \001(\020:\0011\022\022\n\004bool\030\r \001(\010:\004true\022"
  "\021\n\006string\030\016 \001(\t:\001a\022\027\n\005bytes\030\017 \001(\014:\010\\253\\"
  "016\022\033\n\004enum\030\020 \001(\0162\005.Enum:\006VALUE2\"\217\002\n\010Req"
  "uired\022\016\n\006double\030\001 \002(\001\022\r\n\005float\030\002 \002(\002\022\r\n\005"
  "int32\030\003 \002(\005\022\r\n\005int64\030\004 \002(\003\022\016\n\006uint32\030\005 \002"
  "(\r\022\016\n\006uint64\030\006 \002(\004\022\016\n\006sint32\030\007 \002(\021\022\016\n\006si"
  "nt64\030\010 \002(\022\022\017\n\007fixed32\030\t \002(\007\022\017\n\007fixed64\030\n"
  " \002(\006\022\020\n\010sfixed32\030\013 \002(\017\022\020\n\010sfixed64\030\014 \002(\020"
  "\022\014\n\004bool\030\r \002(\010\022\016\n\006string\030\016 \002(\t\022\r\n\005bytes\030"
  "\017 \002(\014\022\023\n\004enum\030\020 \002(\0162\005.Enum\"\307\002\n\010Repeated\022"
  "\022\n\006double\030\001 \003(\001B\002\020\001\022\021\n\005float\030\002 \003(\002B\002\020\001\022\021"
  "\n\005int32\030\003 \003(\005B\002\020\001\022\021\n\005int64\030\004 \003(\003B\002\020\001\022\022\n\006"
  "uint32\030\005 \003(\rB\002\020\001\022\022\n\006uint64\030\006 \003(\004B\002\020\001\022\022\n\006"
  "sint32\030\007 \003(\021B\002\020\001\022\022\n\006sint64\030\010 \003(\022B\002\020\001\022\023\n\007"
  "fixed32\030\t \003(\007B\002\020\001\022\023\n\007fixed64\030\n \003(\006B\002\020\001\022\024"
  "\n\010sfixed32\030\013 \003(\017B\002\020\001\022\024\n\010sfixed64\030\014 \003(\020B\002"
  "\020\001\022\020\n\004bool\030\r \003(\010B\002\020\001\022\016\n\006string\030\016 \003(\t\022\r\n\005"
  "bytes\030\017 \003(\014\022\027\n\004enum\030\020 \003(\0162\005.EnumB\002\020\001\"\360\001\n"
  "\010UnPacked\022\016\n\006double\030\001 \003(\001\022\r\n\005float\030\002 \003(\002"
  "\022\r\n\005int32\030\003 \003(\005\022\r\n\005int64\030\004 \003(\003\022\016\n\006uint32"
  "\030\005 \003(\r\022\016\n\006uint64\030\006 \003(\004\022\016\n\006sint32\030\007 \003(\021\022\016"
  "\n\006sint64\030\010 \003(\022\022\017\n\007fixed32\030\t \003(\007\022\017\n\007fixed"
  "64\030\n \003(\006\022\020\n\010sfixed32\030\013 \003(\017\022\020\n\010sfixed64\030\014"
  " \003(\020\022\014\n\004bool\030\r \003(\010\022\023\n\004enum\030\020 \003(\0162\005.Enum\""
  "\230\001\n\007Message\022\033\n\010optional\030\001 \003(\0132\t.Optional"
  "\022\031\n\007default\030\002 \003(\0132\010.Default\022\033\n\010required\030"
  "\003 \003(\0132\t.Required\022\033\n\010repeated\030\004 \003(\0132\t.Rep"
  "eated\022\033\n\010unpacked\030\005 \003(\0132\t.UnPacked*\036\n\004En"
  "um\022\n\n\006VALUE0\020\000\022\n\n\006VALUE2\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_schema_2fmessage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_schema_2fmessage_2eproto_sccs[6] = {
  &scc_info_Default_schema_2fmessage_2eproto.base,
  &scc_info_Message_schema_2fmessage_2eproto.base,
  &scc_info_Optional_schema_2fmessage_2eproto.base,
  &scc_info_Repeated_schema_2fmessage_2eproto.base,
  &scc_info_Required_schema_2fmessage_2eproto.base,
  &scc_info_UnPacked_schema_2fmessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_schema_2fmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_schema_2fmessage_2eproto = {
  false, false, descriptor_table_protodef_schema_2fmessage_2eproto, "schema/message.proto", 1666,
  &descriptor_table_schema_2fmessage_2eproto_once, descriptor_table_schema_2fmessage_2eproto_sccs, descriptor_table_schema_2fmessage_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_schema_2fmessage_2eproto::offsets,
  file_level_metadata_schema_2fmessage_2eproto, 6, file_level_enum_descriptors_schema_2fmessage_2eproto, file_level_service_descriptors_schema_2fmessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_schema_2fmessage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_schema_2fmessage_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_schema_2fmessage_2eproto);
  return file_level_enum_descriptors_schema_2fmessage_2eproto[0];
}
bool Enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Optional::InitAsDefaultInstance() {
}
class Optional::_Internal {
 public:
  using HasBits = decltype(std::declval<Optional>()._has_bits_);
  static void set_has_double_(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_float_(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sint32(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sint64(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_fixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_sfixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_sfixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_bool_(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enum_(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

Optional::Optional(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Optional)
}
Optional::Optional(const Optional& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string()) {
    string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_string(),
      GetArena());
  }
  bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bytes()) {
    bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bytes(),
      GetArena());
  }
  ::memcpy(&double__, &from.double__,
    static_cast<size_t>(reinterpret_cast<char*>(&enum__) -
    reinterpret_cast<char*>(&double__)) + sizeof(enum__));
  // @@protoc_insertion_point(copy_constructor:Optional)
}

void Optional::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Optional_schema_2fmessage_2eproto.base);
  string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&double__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enum__) -
      reinterpret_cast<char*>(&double__)) + sizeof(enum__));
}

Optional::~Optional() {
  // @@protoc_insertion_point(destructor:Optional)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optional::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Optional::ArenaDtor(void* object) {
  Optional* _this = reinterpret_cast< Optional* >(object);
  (void)_this;
}
void Optional::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optional::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Optional& Optional::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Optional_schema_2fmessage_2eproto.base);
  return *internal_default_instance();
}


void Optional::Clear() {
// @@protoc_insertion_point(message_clear_start:Optional)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      bytes_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&double__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uint32_) -
        reinterpret_cast<char*>(&double__)) + sizeof(uint32_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&sint32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enum__) -
        reinterpret_cast<char*>(&sint32_)) + sizeof(enum__));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optional::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_double_(&has_bits);
          double__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float float = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_float_(&has_bits);
          float__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 int32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_int32(&has_bits);
          int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 int64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_int64(&has_bits);
          int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_uint32(&has_bits);
          uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 uint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_uint64(&has_bits);
          uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 sint32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_sint32(&has_bits);
          sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint64 sint64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_sint64(&has_bits);
          sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 fixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_fixed32(&has_bits);
          fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 fixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_fixed64(&has_bits);
          fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional sfixed32 sfixed32 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_sfixed32(&has_bits);
          sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // optional sfixed64 sfixed64 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_sfixed64(&has_bits);
          sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // optional bool bool = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_bool_(&has_bits);
          bool__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Optional.string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Enum enum = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Enum_IsValid(val))) {
            _internal_set_enum_(static_cast<::Enum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optional::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Optional)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double double = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_double_(), target);
  }

  // optional float float = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_float_(), target);
  }

  // optional int32 int32 = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_int32(), target);
  }

  // optional int64 int64 = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_int64(), target);
  }

  // optional uint32 uint32 = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uint32(), target);
  }

  // optional uint64 uint64 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_uint64(), target);
  }

  // optional sint32 sint32 = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_sint32(), target);
  }

  // optional sint64 sint64 = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(8, this->_internal_sint64(), target);
  }

  // optional fixed32 fixed32 = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->_internal_fixed32(), target);
  }

  // optional fixed64 fixed64 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_fixed64(), target);
  }

  // optional sfixed32 sfixed32 = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(11, this->_internal_sfixed32(), target);
  }

  // optional sfixed64 sfixed64 = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(12, this->_internal_sfixed64(), target);
  }

  // optional bool bool = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_bool_(), target);
  }

  // optional string string = 14;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Optional.string");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_string(), target);
  }

  // optional bytes bytes = 15;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_bytes(), target);
  }

  // optional .Enum enum = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_enum_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Optional)
  return target;
}

size_t Optional::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Optional)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string string = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
    }

    // optional bytes bytes = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes());
    }

    // optional double double = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional float float = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 int32 = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int32());
    }

    // optional int64 int64 = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_int64());
    }

    // optional uint64 uint64 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uint64());
    }

    // optional uint32 uint32 = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional sint32 sint32 = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_sint32());
    }

    // optional sint64 sint64 = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_sint64());
    }

    // optional fixed64 fixed64 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional fixed32 fixed32 = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional sfixed32 sfixed32 = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional sfixed64 sfixed64 = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional bool bool = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional .Enum enum = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_enum_());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optional::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Optional)
  GOOGLE_DCHECK_NE(&from, this);
  const Optional* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optional>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Optional)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Optional)
    MergeFrom(*source);
  }
}

void Optional::MergeFrom(const Optional& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Optional)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string(from._internal_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_bytes(from._internal_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      double__ = from.double__;
    }
    if (cached_has_bits & 0x00000008u) {
      float__ = from.float__;
    }
    if (cached_has_bits & 0x00000010u) {
      int32_ = from.int32_;
    }
    if (cached_has_bits & 0x00000020u) {
      int64_ = from.int64_;
    }
    if (cached_has_bits & 0x00000040u) {
      uint64_ = from.uint64_;
    }
    if (cached_has_bits & 0x00000080u) {
      uint32_ = from.uint32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      sint32_ = from.sint32_;
    }
    if (cached_has_bits & 0x00000200u) {
      sint64_ = from.sint64_;
    }
    if (cached_has_bits & 0x00000400u) {
      fixed64_ = from.fixed64_;
    }
    if (cached_has_bits & 0x00000800u) {
      fixed32_ = from.fixed32_;
    }
    if (cached_has_bits & 0x00001000u) {
      sfixed32_ = from.sfixed32_;
    }
    if (cached_has_bits & 0x00002000u) {
      sfixed64_ = from.sfixed64_;
    }
    if (cached_has_bits & 0x00004000u) {
      bool__ = from.bool__;
    }
    if (cached_has_bits & 0x00008000u) {
      enum__ = from.enum__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Optional::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Optional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optional::CopyFrom(const Optional& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Optional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optional::IsInitialized() const {
  return true;
}

void Optional::InternalSwap(Optional* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  string_.Swap(&other->string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bytes_.Swap(&other->bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Optional, enum__)
      + sizeof(Optional::enum__)
      - PROTOBUF_FIELD_OFFSET(Optional, double__)>(
          reinterpret_cast<char*>(&double__),
          reinterpret_cast<char*>(&other->double__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Optional::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Default::InitAsDefaultInstance() {
}
class Default::_Internal {
 public:
  using HasBits = decltype(std::declval<Default>()._has_bits_);
  static void set_has_double_(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_float_(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sint32(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sint64(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_fixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_sfixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_sfixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_bool_(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enum_(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Default::_i_give_permission_to_break_this_code_default_string_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Default::_i_give_permission_to_break_this_code_default_bytes_;
Default::Default(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Default)
}
Default::Default(const Default& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_.UnsafeSetDefault(&::Default::_i_give_permission_to_break_this_code_default_string_.get());
  if (from._internal_has_string()) {
    string_.Set(&::Default::_i_give_permission_to_break_this_code_default_string_.get(), from._internal_string(),
      GetArena());
  }
  bytes_.UnsafeSetDefault(&::Default::_i_give_permission_to_break_this_code_default_bytes_.get());
  if (from._internal_has_bytes()) {
    bytes_.Set(&::Default::_i_give_permission_to_break_this_code_default_bytes_.get(), from._internal_bytes(),
      GetArena());
  }
  ::memcpy(&double__, &from.double__,
    static_cast<size_t>(reinterpret_cast<char*>(&enum__) -
    reinterpret_cast<char*>(&double__)) + sizeof(enum__));
  // @@protoc_insertion_point(copy_constructor:Default)
}

void Default::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Default_schema_2fmessage_2eproto.base);
  string_.UnsafeSetDefault(&::Default::_i_give_permission_to_break_this_code_default_string_.get());
  bytes_.UnsafeSetDefault(&::Default::_i_give_permission_to_break_this_code_default_bytes_.get());
  double__ = 1;
  float__ = 1;
  int32_ = 1;
  int64_ = PROTOBUF_LONGLONG(1);
  uint64_ = PROTOBUF_ULONGLONG(1);
  uint32_ = 1u;
  sint32_ = 1;
  sint64_ = PROTOBUF_LONGLONG(1);
  fixed64_ = PROTOBUF_ULONGLONG(1);
  fixed32_ = 1u;
  sfixed32_ = 1;
  sfixed64_ = PROTOBUF_LONGLONG(1);
  bool__ = true;
  enum__ = 2;
}

Default::~Default() {
  // @@protoc_insertion_point(destructor:Default)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Default::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  string_.DestroyNoArena(&::Default::_i_give_permission_to_break_this_code_default_string_.get());
  bytes_.DestroyNoArena(&::Default::_i_give_permission_to_break_this_code_default_bytes_.get());
}

void Default::ArenaDtor(void* object) {
  Default* _this = reinterpret_cast< Default* >(object);
  (void)_this;
}
void Default::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Default::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Default& Default::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Default_schema_2fmessage_2eproto.base);
  return *internal_default_instance();
}


void Default::Clear() {
// @@protoc_insertion_point(message_clear_start:Default)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      string_.ClearToDefault(&::Default::_i_give_permission_to_break_this_code_default_string_.get(), GetArena());
    }
    if (cached_has_bits & 0x00000002u) {
      bytes_.ClearToDefault(&::Default::_i_give_permission_to_break_this_code_default_bytes_.get(), GetArena());
    }
    double__ = 1;
    float__ = 1;
    int32_ = 1;
    int64_ = PROTOBUF_LONGLONG(1);
    uint64_ = PROTOBUF_ULONGLONG(1);
    uint32_ = 1u;
  }
  if (cached_has_bits & 0x0000ff00u) {
    sint32_ = 1;
    sint64_ = PROTOBUF_LONGLONG(1);
    fixed64_ = PROTOBUF_ULONGLONG(1);
    fixed32_ = 1u;
    sfixed32_ = 1;
    sfixed64_ = PROTOBUF_LONGLONG(1);
    bool__ = true;
    enum__ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Default::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double double = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_double_(&has_bits);
          double__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float float = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_float_(&has_bits);
          float__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 int32 = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_int32(&has_bits);
          int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 int64 = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_int64(&has_bits);
          int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uint32 = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_uint32(&has_bits);
          uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 uint64 = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_uint64(&has_bits);
          uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 sint32 = 7 [default = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_sint32(&has_bits);
          sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint64 sint64 = 8 [default = 1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_sint64(&has_bits);
          sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 fixed32 = 9 [default = 1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_fixed32(&has_bits);
          fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 fixed64 = 10 [default = 1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_fixed64(&has_bits);
          fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional sfixed32 sfixed32 = 11 [default = 1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_sfixed32(&has_bits);
          sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // optional sfixed64 sfixed64 = 12 [default = 1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_sfixed64(&has_bits);
          sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // optional bool bool = 13 [default = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_bool_(&has_bits);
          bool__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string = 14 [default = "a"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Default.string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes bytes = 15 [default = "\253\016"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Enum enum = 16 [default = VALUE2];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Enum_IsValid(val))) {
            _internal_set_enum_(static_cast<::Enum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Default::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Default)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double double = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_double_(), target);
  }

  // optional float float = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_float_(), target);
  }

  // optional int32 int32 = 3 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_int32(), target);
  }

  // optional int64 int64 = 4 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_int64(), target);
  }

  // optional uint32 uint32 = 5 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uint32(), target);
  }

  // optional uint64 uint64 = 6 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_uint64(), target);
  }

  // optional sint32 sint32 = 7 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_sint32(), target);
  }

  // optional sint64 sint64 = 8 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(8, this->_internal_sint64(), target);
  }

  // optional fixed32 fixed32 = 9 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->_internal_fixed32(), target);
  }

  // optional fixed64 fixed64 = 10 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_fixed64(), target);
  }

  // optional sfixed32 sfixed32 = 11 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(11, this->_internal_sfixed32(), target);
  }

  // optional sfixed64 sfixed64 = 12 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(12, this->_internal_sfixed64(), target);
  }

  // optional bool bool = 13 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_bool_(), target);
  }

  // optional string string = 14 [default = "a"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Default.string");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_string(), target);
  }

  // optional bytes bytes = 15 [default = "\253\016"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_bytes(), target);
  }

  // optional .Enum enum = 16 [default = VALUE2];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_enum_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Default)
  return target;
}

size_t Default::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Default)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string string = 14 [default = "a"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
    }

    // optional bytes bytes = 15 [default = "\253\016"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes());
    }

    // optional double double = 1 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional float float = 2 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 int32 = 3 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int32());
    }

    // optional int64 int64 = 4 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_int64());
    }

    // optional uint64 uint64 = 6 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uint64());
    }

    // optional uint32 uint32 = 5 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional sint32 sint32 = 7 [default = 1];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_sint32());
    }

    // optional sint64 sint64 = 8 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_sint64());
    }

    // optional fixed64 fixed64 = 10 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional fixed32 fixed32 = 9 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional sfixed32 sfixed32 = 11 [default = 1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional sfixed64 sfixed64 = 12 [default = 1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional bool bool = 13 [default = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional .Enum enum = 16 [default = VALUE2];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_enum_());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Default::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Default)
  GOOGLE_DCHECK_NE(&from, this);
  const Default* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Default>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Default)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Default)
    MergeFrom(*source);
  }
}

void Default::MergeFrom(const Default& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Default)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string(from._internal_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_bytes(from._internal_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      double__ = from.double__;
    }
    if (cached_has_bits & 0x00000008u) {
      float__ = from.float__;
    }
    if (cached_has_bits & 0x00000010u) {
      int32_ = from.int32_;
    }
    if (cached_has_bits & 0x00000020u) {
      int64_ = from.int64_;
    }
    if (cached_has_bits & 0x00000040u) {
      uint64_ = from.uint64_;
    }
    if (cached_has_bits & 0x00000080u) {
      uint32_ = from.uint32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      sint32_ = from.sint32_;
    }
    if (cached_has_bits & 0x00000200u) {
      sint64_ = from.sint64_;
    }
    if (cached_has_bits & 0x00000400u) {
      fixed64_ = from.fixed64_;
    }
    if (cached_has_bits & 0x00000800u) {
      fixed32_ = from.fixed32_;
    }
    if (cached_has_bits & 0x00001000u) {
      sfixed32_ = from.sfixed32_;
    }
    if (cached_has_bits & 0x00002000u) {
      sfixed64_ = from.sfixed64_;
    }
    if (cached_has_bits & 0x00004000u) {
      bool__ = from.bool__;
    }
    if (cached_has_bits & 0x00008000u) {
      enum__ = from.enum__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Default::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Default)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Default::CopyFrom(const Default& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Default)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Default::IsInitialized() const {
  return true;
}

void Default::InternalSwap(Default* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  string_.Swap(&other->string_, &::Default::_i_give_permission_to_break_this_code_default_string_.get(), GetArena());
  bytes_.Swap(&other->bytes_, &::Default::_i_give_permission_to_break_this_code_default_bytes_.get(), GetArena());
  swap(double__, other->double__);
  swap(float__, other->float__);
  swap(int32_, other->int32_);
  swap(int64_, other->int64_);
  swap(uint64_, other->uint64_);
  swap(uint32_, other->uint32_);
  swap(sint32_, other->sint32_);
  swap(sint64_, other->sint64_);
  swap(fixed64_, other->fixed64_);
  swap(fixed32_, other->fixed32_);
  swap(sfixed32_, other->sfixed32_);
  swap(sfixed64_, other->sfixed64_);
  swap(bool__, other->bool__);
  swap(enum__, other->enum__);
}

::PROTOBUF_NAMESPACE_ID::Metadata Default::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Required::InitAsDefaultInstance() {
}
class Required::_Internal {
 public:
  using HasBits = decltype(std::declval<Required>()._has_bits_);
  static void set_has_double_(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_float_(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sint32(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sint64(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_fixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_sfixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_sfixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_bool_(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enum_(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000ffff) ^ 0x0000ffff) != 0;
  }
};

Required::Required(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Required)
}
Required::Required(const Required& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string()) {
    string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_string(),
      GetArena());
  }
  bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bytes()) {
    bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bytes(),
      GetArena());
  }
  ::memcpy(&double__, &from.double__,
    static_cast<size_t>(reinterpret_cast<char*>(&enum__) -
    reinterpret_cast<char*>(&double__)) + sizeof(enum__));
  // @@protoc_insertion_point(copy_constructor:Required)
}

void Required::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Required_schema_2fmessage_2eproto.base);
  string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&double__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enum__) -
      reinterpret_cast<char*>(&double__)) + sizeof(enum__));
}

Required::~Required() {
  // @@protoc_insertion_point(destructor:Required)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Required::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Required::ArenaDtor(void* object) {
  Required* _this = reinterpret_cast< Required* >(object);
  (void)_this;
}
void Required::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Required::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Required& Required::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Required_schema_2fmessage_2eproto.base);
  return *internal_default_instance();
}


void Required::Clear() {
// @@protoc_insertion_point(message_clear_start:Required)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      bytes_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&double__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uint32_) -
        reinterpret_cast<char*>(&double__)) + sizeof(uint32_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&sint32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enum__) -
        reinterpret_cast<char*>(&sint32_)) + sizeof(enum__));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Required::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_double_(&has_bits);
          double__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required float float = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_float_(&has_bits);
          float__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 int32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_int32(&has_bits);
          int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 int64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_int64(&has_bits);
          int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_uint32(&has_bits);
          uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 uint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_uint64(&has_bits);
          uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required sint32 sint32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_sint32(&has_bits);
          sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required sint64 sint64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_sint64(&has_bits);
          sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required fixed32 fixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_fixed32(&has_bits);
          fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // required fixed64 fixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_fixed64(&has_bits);
          fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required sfixed32 sfixed32 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_sfixed32(&has_bits);
          sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // required sfixed64 sfixed64 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_sfixed64(&has_bits);
          sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // required bool bool = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_bool_(&has_bits);
          bool__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Required.string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Enum enum = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Enum_IsValid(val))) {
            _internal_set_enum_(static_cast<::Enum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Required::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Required)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double double = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_double_(), target);
  }

  // required float float = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_float_(), target);
  }

  // required int32 int32 = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_int32(), target);
  }

  // required int64 int64 = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_int64(), target);
  }

  // required uint32 uint32 = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uint32(), target);
  }

  // required uint64 uint64 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_uint64(), target);
  }

  // required sint32 sint32 = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_sint32(), target);
  }

  // required sint64 sint64 = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(8, this->_internal_sint64(), target);
  }

  // required fixed32 fixed32 = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->_internal_fixed32(), target);
  }

  // required fixed64 fixed64 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_fixed64(), target);
  }

  // required sfixed32 sfixed32 = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(11, this->_internal_sfixed32(), target);
  }

  // required sfixed64 sfixed64 = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(12, this->_internal_sfixed64(), target);
  }

  // required bool bool = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_bool_(), target);
  }

  // required string string = 14;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Required.string");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_string(), target);
  }

  // required bytes bytes = 15;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_bytes(), target);
  }

  // required .Enum enum = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_enum_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Required)
  return target;
}

size_t Required::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Required)
  size_t total_size = 0;

  if (_internal_has_string()) {
    // required string string = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string());
  }

  if (_internal_has_bytes()) {
    // required bytes bytes = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bytes());
  }

  if (_internal_has_double_()) {
    // required double double = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_float_()) {
    // required float float = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_int32()) {
    // required int32 int32 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_int32());
  }

  if (_internal_has_int64()) {
    // required int64 int64 = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_int64());
  }

  if (_internal_has_uint64()) {
    // required uint64 uint64 = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uint64());
  }

  if (_internal_has_uint32()) {
    // required uint32 uint32 = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uint32());
  }

  if (_internal_has_sint32()) {
    // required sint32 sint32 = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sint32());
  }

  if (_internal_has_sint64()) {
    // required sint64 sint64 = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_sint64());
  }

  if (_internal_has_fixed64()) {
    // required fixed64 fixed64 = 10;
    total_size += 1 + 8;
  }

  if (_internal_has_fixed32()) {
    // required fixed32 fixed32 = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_sfixed32()) {
    // required sfixed32 sfixed32 = 11;
    total_size += 1 + 4;
  }

  if (_internal_has_sfixed64()) {
    // required sfixed64 sfixed64 = 12;
    total_size += 1 + 8;
  }

  if (_internal_has_bool_()) {
    // required bool bool = 13;
    total_size += 1 + 1;
  }

  if (_internal_has_enum_()) {
    // required .Enum enum = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_enum_());
  }

  return total_size;
}
size_t Required::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Required)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000ffff) ^ 0x0000ffff) == 0) {  // All required fields are present.
    // required string string = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string());

    // required bytes bytes = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bytes());

    // required double double = 1;
    total_size += 1 + 8;

    // required float float = 2;
    total_size += 1 + 4;

    // required int32 int32 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_int32());

    // required int64 int64 = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_int64());

    // required uint64 uint64 = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uint64());

    // required uint32 uint32 = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uint32());

    // required sint32 sint32 = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sint32());

    // required sint64 sint64 = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_sint64());

    // required fixed64 fixed64 = 10;
    total_size += 1 + 8;

    // required fixed32 fixed32 = 9;
    total_size += 1 + 4;

    // required sfixed32 sfixed32 = 11;
    total_size += 1 + 4;

    // required sfixed64 sfixed64 = 12;
    total_size += 1 + 8;

    // required bool bool = 13;
    total_size += 1 + 1;

    // required .Enum enum = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_enum_());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Required::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Required)
  GOOGLE_DCHECK_NE(&from, this);
  const Required* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Required>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Required)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Required)
    MergeFrom(*source);
  }
}

void Required::MergeFrom(const Required& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Required)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string(from._internal_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_bytes(from._internal_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      double__ = from.double__;
    }
    if (cached_has_bits & 0x00000008u) {
      float__ = from.float__;
    }
    if (cached_has_bits & 0x00000010u) {
      int32_ = from.int32_;
    }
    if (cached_has_bits & 0x00000020u) {
      int64_ = from.int64_;
    }
    if (cached_has_bits & 0x00000040u) {
      uint64_ = from.uint64_;
    }
    if (cached_has_bits & 0x00000080u) {
      uint32_ = from.uint32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      sint32_ = from.sint32_;
    }
    if (cached_has_bits & 0x00000200u) {
      sint64_ = from.sint64_;
    }
    if (cached_has_bits & 0x00000400u) {
      fixed64_ = from.fixed64_;
    }
    if (cached_has_bits & 0x00000800u) {
      fixed32_ = from.fixed32_;
    }
    if (cached_has_bits & 0x00001000u) {
      sfixed32_ = from.sfixed32_;
    }
    if (cached_has_bits & 0x00002000u) {
      sfixed64_ = from.sfixed64_;
    }
    if (cached_has_bits & 0x00004000u) {
      bool__ = from.bool__;
    }
    if (cached_has_bits & 0x00008000u) {
      enum__ = from.enum__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Required::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Required)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Required::CopyFrom(const Required& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Required)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Required::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Required::InternalSwap(Required* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  string_.Swap(&other->string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bytes_.Swap(&other->bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Required, enum__)
      + sizeof(Required::enum__)
      - PROTOBUF_FIELD_OFFSET(Required, double__)>(
          reinterpret_cast<char*>(&double__),
          reinterpret_cast<char*>(&other->double__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Required::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Repeated::InitAsDefaultInstance() {
}
class Repeated::_Internal {
 public:
};

Repeated::Repeated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  double__(arena),
  float__(arena),
  int32_(arena),
  int64_(arena),
  uint32_(arena),
  uint64_(arena),
  sint32_(arena),
  sint64_(arena),
  fixed32_(arena),
  fixed64_(arena),
  sfixed32_(arena),
  sfixed64_(arena),
  bool__(arena),
  string_(arena),
  bytes_(arena),
  enum__(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Repeated)
}
Repeated::Repeated(const Repeated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      double__(from.double__),
      float__(from.float__),
      int32_(from.int32_),
      int64_(from.int64_),
      uint32_(from.uint32_),
      uint64_(from.uint64_),
      sint32_(from.sint32_),
      sint64_(from.sint64_),
      fixed32_(from.fixed32_),
      fixed64_(from.fixed64_),
      sfixed32_(from.sfixed32_),
      sfixed64_(from.sfixed64_),
      bool__(from.bool__),
      string_(from.string_),
      bytes_(from.bytes_),
      enum__(from.enum__) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Repeated)
}

void Repeated::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Repeated_schema_2fmessage_2eproto.base);
}

Repeated::~Repeated() {
  // @@protoc_insertion_point(destructor:Repeated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Repeated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Repeated::ArenaDtor(void* object) {
  Repeated* _this = reinterpret_cast< Repeated* >(object);
  (void)_this;
}
void Repeated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Repeated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Repeated& Repeated::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Repeated_schema_2fmessage_2eproto.base);
  return *internal_default_instance();
}


void Repeated::Clear() {
// @@protoc_insertion_point(message_clear_start:Repeated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  double__.Clear();
  float__.Clear();
  int32_.Clear();
  int64_.Clear();
  uint32_.Clear();
  uint64_.Clear();
  sint32_.Clear();
  sint64_.Clear();
  fixed32_.Clear();
  fixed64_.Clear();
  sfixed32_.Clear();
  sfixed64_.Clear();
  bool__.Clear();
  string_.Clear();
  bytes_.Clear();
  enum__.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Repeated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double double = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_double_(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_double_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated float float = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_float_(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_float_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 int32 = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 int64 = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_int64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 uint32 = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_uint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 uint64 = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_uint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 sint32 = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_sint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 sint64 = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_sint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 fixed32 = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77) {
          _internal_add_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 fixed64 = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81) {
          _internal_add_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 sfixed32 = 11 [packed = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93) {
          _internal_add_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // repeated sfixed64 sfixed64 = 12 [packed = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97) {
          _internal_add_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // repeated bool bool = 13 [packed = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_bool_(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          _internal_add_bool_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Repeated.string");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bytes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Enum enum = 16 [packed = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_enum_(), ptr, ctx, ::Enum_IsValid, &_internal_metadata_, 16);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Enum_IsValid(val))) {
            _internal_add_enum_(static_cast<::Enum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Repeated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Repeated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double double = 1 [packed = true];
  if (this->_internal_double__size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_double_(), target);
  }

  // repeated float float = 2 [packed = true];
  if (this->_internal_float__size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_float_(), target);
  }

  // repeated int32 int32 = 3 [packed = true];
  {
    int byte_size = _int32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_int32(), byte_size, target);
    }
  }

  // repeated int64 int64 = 4 [packed = true];
  {
    int byte_size = _int64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_int64(), byte_size, target);
    }
  }

  // repeated uint32 uint32 = 5 [packed = true];
  {
    int byte_size = _uint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_uint32(), byte_size, target);
    }
  }

  // repeated uint64 uint64 = 6 [packed = true];
  {
    int byte_size = _uint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          6, _internal_uint64(), byte_size, target);
    }
  }

  // repeated sint32 sint32 = 7 [packed = true];
  {
    int byte_size = _sint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          7, _internal_sint32(), byte_size, target);
    }
  }

  // repeated sint64 sint64 = 8 [packed = true];
  {
    int byte_size = _sint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          8, _internal_sint64(), byte_size, target);
    }
  }

  // repeated fixed32 fixed32 = 9 [packed = true];
  if (this->_internal_fixed32_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_fixed32(), target);
  }

  // repeated fixed64 fixed64 = 10 [packed = true];
  if (this->_internal_fixed64_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_fixed64(), target);
  }

  // repeated sfixed32 sfixed32 = 11 [packed = true];
  if (this->_internal_sfixed32_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_sfixed32(), target);
  }

  // repeated sfixed64 sfixed64 = 12 [packed = true];
  if (this->_internal_sfixed64_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_sfixed64(), target);
  }

  // repeated bool bool = 13 [packed = true];
  if (this->_internal_bool__size() > 0) {
    target = stream->WriteFixedPacked(13, _internal_bool_(), target);
  }

  // repeated string string = 14;
  for (int i = 0, n = this->_internal_string_size(); i < n; i++) {
    const auto& s = this->_internal_string(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Repeated.string");
    target = stream->WriteString(14, s, target);
  }

  // repeated bytes bytes = 15;
  for (int i = 0, n = this->_internal_bytes_size(); i < n; i++) {
    const auto& s = this->_internal_bytes(i);
    target = stream->WriteBytes(15, s, target);
  }

  // repeated .Enum enum = 16 [packed = true];
  {
    int byte_size = _enum__cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          16, enum__, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Repeated)
  return target;
}

size_t Repeated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Repeated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double double = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double__size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _double__cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float float = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float__size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _float__cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 int32 = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->int32_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 int64 = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->int64_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 uint32 = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->uint32_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 uint64 = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->uint64_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 sint32 = 7 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->sint32_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint64 sint64 = 8 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->sint64_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed32 fixed32 = 9 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fixed32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed64 fixed64 = 10 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fixed64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed32 sfixed32 = 11 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sfixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sfixed32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed64 sfixed64 = 12 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sfixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sfixed64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool bool = 13 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bool__size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bool__cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string string = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(string_.size());
  for (int i = 0, n = string_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      string_.Get(i));
  }

  // repeated bytes bytes = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bytes_.size());
  for (int i = 0, n = bytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      bytes_.Get(i));
  }

  // repeated .Enum enum = 16 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_enum__size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_enum_(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _enum__cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Repeated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Repeated)
  GOOGLE_DCHECK_NE(&from, this);
  const Repeated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Repeated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Repeated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Repeated)
    MergeFrom(*source);
  }
}

void Repeated::MergeFrom(const Repeated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Repeated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  double__.MergeFrom(from.double__);
  float__.MergeFrom(from.float__);
  int32_.MergeFrom(from.int32_);
  int64_.MergeFrom(from.int64_);
  uint32_.MergeFrom(from.uint32_);
  uint64_.MergeFrom(from.uint64_);
  sint32_.MergeFrom(from.sint32_);
  sint64_.MergeFrom(from.sint64_);
  fixed32_.MergeFrom(from.fixed32_);
  fixed64_.MergeFrom(from.fixed64_);
  sfixed32_.MergeFrom(from.sfixed32_);
  sfixed64_.MergeFrom(from.sfixed64_);
  bool__.MergeFrom(from.bool__);
  string_.MergeFrom(from.string_);
  bytes_.MergeFrom(from.bytes_);
  enum__.MergeFrom(from.enum__);
}

void Repeated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Repeated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Repeated::CopyFrom(const Repeated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Repeated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Repeated::IsInitialized() const {
  return true;
}

void Repeated::InternalSwap(Repeated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  double__.InternalSwap(&other->double__);
  float__.InternalSwap(&other->float__);
  int32_.InternalSwap(&other->int32_);
  int64_.InternalSwap(&other->int64_);
  uint32_.InternalSwap(&other->uint32_);
  uint64_.InternalSwap(&other->uint64_);
  sint32_.InternalSwap(&other->sint32_);
  sint64_.InternalSwap(&other->sint64_);
  fixed32_.InternalSwap(&other->fixed32_);
  fixed64_.InternalSwap(&other->fixed64_);
  sfixed32_.InternalSwap(&other->sfixed32_);
  sfixed64_.InternalSwap(&other->sfixed64_);
  bool__.InternalSwap(&other->bool__);
  string_.InternalSwap(&other->string_);
  bytes_.InternalSwap(&other->bytes_);
  enum__.InternalSwap(&other->enum__);
}

::PROTOBUF_NAMESPACE_ID::Metadata Repeated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnPacked::InitAsDefaultInstance() {
}
class UnPacked::_Internal {
 public:
};

UnPacked::UnPacked(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  double__(arena),
  float__(arena),
  int32_(arena),
  int64_(arena),
  uint32_(arena),
  uint64_(arena),
  sint32_(arena),
  sint64_(arena),
  fixed32_(arena),
  fixed64_(arena),
  sfixed32_(arena),
  sfixed64_(arena),
  bool__(arena),
  enum__(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UnPacked)
}
UnPacked::UnPacked(const UnPacked& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      double__(from.double__),
      float__(from.float__),
      int32_(from.int32_),
      int64_(from.int64_),
      uint32_(from.uint32_),
      uint64_(from.uint64_),
      sint32_(from.sint32_),
      sint64_(from.sint64_),
      fixed32_(from.fixed32_),
      fixed64_(from.fixed64_),
      sfixed32_(from.sfixed32_),
      sfixed64_(from.sfixed64_),
      bool__(from.bool__),
      enum__(from.enum__) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:UnPacked)
}

void UnPacked::SharedCtor() {
}

UnPacked::~UnPacked() {
  // @@protoc_insertion_point(destructor:UnPacked)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnPacked::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnPacked::ArenaDtor(void* object) {
  UnPacked* _this = reinterpret_cast< UnPacked* >(object);
  (void)_this;
}
void UnPacked::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnPacked::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnPacked& UnPacked::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnPacked_schema_2fmessage_2eproto.base);
  return *internal_default_instance();
}


void UnPacked::Clear() {
// @@protoc_insertion_point(message_clear_start:UnPacked)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  double__.Clear();
  float__.Clear();
  int32_.Clear();
  int64_.Clear();
  uint32_.Clear();
  uint64_.Clear();
  sint32_.Clear();
  sint64_.Clear();
  fixed32_.Clear();
  fixed64_.Clear();
  sfixed32_.Clear();
  sfixed64_.Clear();
  bool__.Clear();
  enum__.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnPacked::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_double_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_double_(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float float = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_float_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_float_(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 int32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 int64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_int64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 uint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_uint32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 uint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_uint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 sint32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_sint32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 sint64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_sint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 fixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<77>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 fixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<81>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 sfixed32 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<93>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed64 sfixed64 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<97>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool bool = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bool_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_bool_(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Enum enum = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::Enum_IsValid(val))) {
              _internal_add_enum_(static_cast<::Enum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<128>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_enum_(), ptr, ctx, ::Enum_IsValid, &_internal_metadata_, 16);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnPacked::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnPacked)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double double = 1;
  for (int i = 0, n = this->_internal_double__size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_double_(i), target);
  }

  // repeated float float = 2;
  for (int i = 0, n = this->_internal_float__size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_float_(i), target);
  }

  // repeated int32 int32 = 3;
  for (int i = 0, n = this->_internal_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_int32(i), target);
  }

  // repeated int64 int64 = 4;
  for (int i = 0, n = this->_internal_int64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_int64(i), target);
  }

  // repeated uint32 uint32 = 5;
  for (int i = 0, n = this->_internal_uint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uint32(i), target);
  }

  // repeated uint64 uint64 = 6;
  for (int i = 0, n = this->_internal_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_uint64(i), target);
  }

  // repeated sint32 sint32 = 7;
  for (int i = 0, n = this->_internal_sint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_sint32(i), target);
  }

  // repeated sint64 sint64 = 8;
  for (int i = 0, n = this->_internal_sint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(8, this->_internal_sint64(i), target);
  }

  // repeated fixed32 fixed32 = 9;
  for (int i = 0, n = this->_internal_fixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->_internal_fixed32(i), target);
  }

  // repeated fixed64 fixed64 = 10;
  for (int i = 0, n = this->_internal_fixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_fixed64(i), target);
  }

  // repeated sfixed32 sfixed32 = 11;
  for (int i = 0, n = this->_internal_sfixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(11, this->_internal_sfixed32(i), target);
  }

  // repeated sfixed64 sfixed64 = 12;
  for (int i = 0, n = this->_internal_sfixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(12, this->_internal_sfixed64(i), target);
  }

  // repeated bool bool = 13;
  for (int i = 0, n = this->_internal_bool__size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_bool_(i), target);
  }

  // repeated .Enum enum = 16;
  for (int i = 0, n = this->_internal_enum__size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        16, this->_internal_enum_(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnPacked)
  return target;
}

size_t UnPacked::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnPacked)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double double = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double__size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_double__size());
    total_size += data_size;
  }

  // repeated float float = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float__size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_float__size());
    total_size += data_size;
  }

  // repeated int32 int32 = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->int32_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_int32_size());
    total_size += data_size;
  }

  // repeated int64 int64 = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->int64_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_int64_size());
    total_size += data_size;
  }

  // repeated uint32 uint32 = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->uint32_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_uint32_size());
    total_size += data_size;
  }

  // repeated uint64 uint64 = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->uint64_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_uint64_size());
    total_size += data_size;
  }

  // repeated sint32 sint32 = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->sint32_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sint32_size());
    total_size += data_size;
  }

  // repeated sint64 sint64 = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->sint64_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sint64_size());
    total_size += data_size;
  }

  // repeated fixed32 fixed32 = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fixed32_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fixed32_size());
    total_size += data_size;
  }

  // repeated fixed64 fixed64 = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fixed64_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fixed64_size());
    total_size += data_size;
  }

  // repeated sfixed32 sfixed32 = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sfixed32_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sfixed32_size());
    total_size += data_size;
  }

  // repeated sfixed64 sfixed64 = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sfixed64_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sfixed64_size());
    total_size += data_size;
  }

  // repeated bool bool = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bool__size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bool__size());
    total_size += data_size;
  }

  // repeated .Enum enum = 16;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_enum__size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_enum_(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnPacked::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnPacked)
  GOOGLE_DCHECK_NE(&from, this);
  const UnPacked* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnPacked>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnPacked)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnPacked)
    MergeFrom(*source);
  }
}

void UnPacked::MergeFrom(const UnPacked& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnPacked)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  double__.MergeFrom(from.double__);
  float__.MergeFrom(from.float__);
  int32_.MergeFrom(from.int32_);
  int64_.MergeFrom(from.int64_);
  uint32_.MergeFrom(from.uint32_);
  uint64_.MergeFrom(from.uint64_);
  sint32_.MergeFrom(from.sint32_);
  sint64_.MergeFrom(from.sint64_);
  fixed32_.MergeFrom(from.fixed32_);
  fixed64_.MergeFrom(from.fixed64_);
  sfixed32_.MergeFrom(from.sfixed32_);
  sfixed64_.MergeFrom(from.sfixed64_);
  bool__.MergeFrom(from.bool__);
  enum__.MergeFrom(from.enum__);
}

void UnPacked::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnPacked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnPacked::CopyFrom(const UnPacked& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnPacked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnPacked::IsInitialized() const {
  return true;
}

void UnPacked::InternalSwap(UnPacked* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  double__.InternalSwap(&other->double__);
  float__.InternalSwap(&other->float__);
  int32_.InternalSwap(&other->int32_);
  int64_.InternalSwap(&other->int64_);
  uint32_.InternalSwap(&other->uint32_);
  uint64_.InternalSwap(&other->uint64_);
  sint32_.InternalSwap(&other->sint32_);
  sint64_.InternalSwap(&other->sint64_);
  fixed32_.InternalSwap(&other->fixed32_);
  fixed64_.InternalSwap(&other->fixed64_);
  sfixed32_.InternalSwap(&other->sfixed32_);
  sfixed64_.InternalSwap(&other->sfixed64_);
  bool__.InternalSwap(&other->bool__);
  enum__.InternalSwap(&other->enum__);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnPacked::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message::InitAsDefaultInstance() {
}
class Message::_Internal {
 public:
};

Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  optional_(arena),
  default__(arena),
  required_(arena),
  repeated_(arena),
  unpacked_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      optional_(from.optional_),
      default__(from.default__),
      required_(from.required_),
      repeated_(from.repeated_),
      unpacked_(from.unpacked_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Message)
}

void Message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_schema_2fmessage_2eproto.base);
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:Message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_schema_2fmessage_2eproto.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  optional_.Clear();
  default__.Clear();
  required_.Clear();
  repeated_.Clear();
  unpacked_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Optional optional = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_optional(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Default default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_default_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Required required = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_required(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Repeated repeated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .UnPacked unpacked = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unpacked(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Optional optional = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_optional_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_optional(i), target, stream);
  }

  // repeated .Default default = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_default__size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_default_(i), target, stream);
  }

  // repeated .Required required = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_required_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_required(i), target, stream);
  }

  // repeated .Repeated repeated = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_repeated(i), target, stream);
  }

  // repeated .UnPacked unpacked = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unpacked_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_unpacked(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Optional optional = 1;
  total_size += 1UL * this->_internal_optional_size();
  for (const auto& msg : this->optional_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Default default = 2;
  total_size += 1UL * this->_internal_default__size();
  for (const auto& msg : this->default__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Required required = 3;
  total_size += 1UL * this->_internal_required_size();
  for (const auto& msg : this->required_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Repeated repeated = 4;
  total_size += 1UL * this->_internal_repeated_size();
  for (const auto& msg : this->repeated_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .UnPacked unpacked = 5;
  total_size += 1UL * this->_internal_unpacked_size();
  for (const auto& msg : this->unpacked_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  optional_.MergeFrom(from.optional_);
  default__.MergeFrom(from.default__);
  required_.MergeFrom(from.required_);
  repeated_.MergeFrom(from.repeated_);
  unpacked_.MergeFrom(from.unpacked_);
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(required_)) return false;
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  optional_.InternalSwap(&other->optional_);
  default__.InternalSwap(&other->default__);
  required_.InternalSwap(&other->required_);
  repeated_.InternalSwap(&other->repeated_);
  unpacked_.InternalSwap(&other->unpacked_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Optional* Arena::CreateMaybeMessage< ::Optional >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Optional >(arena);
}
template<> PROTOBUF_NOINLINE ::Default* Arena::CreateMaybeMessage< ::Default >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Default >(arena);
}
template<> PROTOBUF_NOINLINE ::Required* Arena::CreateMaybeMessage< ::Required >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Required >(arena);
}
template<> PROTOBUF_NOINLINE ::Repeated* Arena::CreateMaybeMessage< ::Repeated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Repeated >(arena);
}
template<> PROTOBUF_NOINLINE ::UnPacked* Arena::CreateMaybeMessage< ::UnPacked >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnPacked >(arena);
}
template<> PROTOBUF_NOINLINE ::Message* Arena::CreateMaybeMessage< ::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
